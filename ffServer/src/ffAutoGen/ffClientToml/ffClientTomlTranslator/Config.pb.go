// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Config.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	Config.proto

It has these top-level messages:
	Grammar
	ExcelExportTest
	Item
	Language
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Grammar struct {
	Grammar string `protobuf:"bytes,1,opt,name=grammar" json:"grammar,omitempty"`
}

func (m *Grammar) Reset()                    { *m = Grammar{} }
func (m *Grammar) String() string            { return proto.CompactTextString(m) }
func (*Grammar) ProtoMessage()               {}
func (*Grammar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Grammar) GetGrammar() string {
	if m != nil {
		return m.Grammar
	}
	return ""
}

type ExcelExportTest struct {
	VIPmapKey   []int32                      `protobuf:"varint,1,rep,packed,name=VIPmapKey" json:"VIPmapKey,omitempty"`
	VIPmapValue []*ExcelExportTest_StVIPmap  `protobuf:"bytes,2,rep,name=VIPmapValue" json:"VIPmapValue,omitempty"`
	VIPstruct   *ExcelExportTest_StVIPstruct `protobuf:"bytes,3,opt,name=VIPstruct" json:"VIPstruct,omitempty"`
	VIPlist     []*ExcelExportTest_StVIPlist `protobuf:"bytes,4,rep,name=VIPlist" json:"VIPlist,omitempty"`
}

func (m *ExcelExportTest) Reset()                    { *m = ExcelExportTest{} }
func (m *ExcelExportTest) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest) ProtoMessage()               {}
func (*ExcelExportTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExcelExportTest) GetVIPmapKey() []int32 {
	if m != nil {
		return m.VIPmapKey
	}
	return nil
}

func (m *ExcelExportTest) GetVIPmapValue() []*ExcelExportTest_StVIPmap {
	if m != nil {
		return m.VIPmapValue
	}
	return nil
}

func (m *ExcelExportTest) GetVIPstruct() *ExcelExportTest_StVIPstruct {
	if m != nil {
		return m.VIPstruct
	}
	return nil
}

func (m *ExcelExportTest) GetVIPlist() []*ExcelExportTest_StVIPlist {
	if m != nil {
		return m.VIPlist
	}
	return nil
}

type ExcelExportTest_StVIPmap struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPmap) Reset()                    { *m = ExcelExportTest_StVIPmap{} }
func (m *ExcelExportTest_StVIPmap) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPmap) ProtoMessage()               {}
func (*ExcelExportTest_StVIPmap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *ExcelExportTest_StVIPmap) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type ExcelExportTest_StVIPstruct struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPstruct) Reset()                    { *m = ExcelExportTest_StVIPstruct{} }
func (m *ExcelExportTest_StVIPstruct) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPstruct) ProtoMessage()               {}
func (*ExcelExportTest_StVIPstruct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type ExcelExportTest_StVIPlist struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPlist) Reset()                    { *m = ExcelExportTest_StVIPlist{} }
func (m *ExcelExportTest_StVIPlist) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPlist) ProtoMessage()               {}
func (*ExcelExportTest_StVIPlist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *ExcelExportTest_StVIPlist) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type Item struct {
	ItemTemplateKey   []int32                `protobuf:"varint,1,rep,packed,name=ItemTemplateKey" json:"ItemTemplateKey,omitempty"`
	ItemTemplateValue []*Item_StItemTemplate `protobuf:"bytes,2,rep,name=ItemTemplateValue" json:"ItemTemplateValue,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Item) GetItemTemplateKey() []int32 {
	if m != nil {
		return m.ItemTemplateKey
	}
	return nil
}

func (m *Item) GetItemTemplateValue() []*Item_StItemTemplate {
	if m != nil {
		return m.ItemTemplateValue
	}
	return nil
}

type Item_StItemTemplate struct {
	Name        string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Desc        string            `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
	SceneKey    string            `protobuf:"bytes,3,opt,name=SceneKey" json:"SceneKey,omitempty"`
	Icon        string            `protobuf:"bytes,4,opt,name=Icon" json:"Icon,omitempty"`
	ItemType    int32             `protobuf:"varint,5,opt,name=ItemType" json:"ItemType,omitempty"`
	SubType     []int32           `protobuf:"varint,6,rep,packed,name=SubType" json:"SubType,omitempty"`
	Attrs1      map[int32]int32   `protobuf:"bytes,7,rep,name=Attrs1" json:"Attrs1,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Attrs1Key   []int32           `protobuf:"varint,8,rep,packed,name=Attrs1Key" json:"Attrs1Key,omitempty"`
	Attrs1Value []int32           `protobuf:"varint,9,rep,packed,name=Attrs1Value" json:"Attrs1Value,omitempty"`
	Attrs2      map[int32]int32   `protobuf:"bytes,10,rep,name=Attrs2" json:"Attrs2,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Attrs2Key   []int32           `protobuf:"varint,11,rep,packed,name=Attrs2Key" json:"Attrs2Key,omitempty"`
	Attrs2Value []int32           `protobuf:"varint,12,rep,packed,name=Attrs2Value" json:"Attrs2Value,omitempty"`
	Attrs3      map[int32]int32   `protobuf:"bytes,13,rep,name=Attrs3" json:"Attrs3,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Attrs3Key   []int32           `protobuf:"varint,14,rep,packed,name=Attrs3Key" json:"Attrs3Key,omitempty"`
	Attrs3Value []int32           `protobuf:"varint,15,rep,packed,name=Attrs3Value" json:"Attrs3Value,omitempty"`
	Attrs4      map[int32]int32   `protobuf:"bytes,16,rep,name=Attrs4" json:"Attrs4,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Attrs4Key   []int32           `protobuf:"varint,17,rep,packed,name=Attrs4Key" json:"Attrs4Key,omitempty"`
	Attrs4Value []int32           `protobuf:"varint,18,rep,packed,name=Attrs4Value" json:"Attrs4Value,omitempty"`
	Attrs5      map[int32]int32   `protobuf:"bytes,19,rep,name=Attrs5" json:"Attrs5,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Attrs5Key   []int32           `protobuf:"varint,20,rep,packed,name=Attrs5Key" json:"Attrs5Key,omitempty"`
	Attrs5Value []int32           `protobuf:"varint,21,rep,packed,name=Attrs5Value" json:"Attrs5Value,omitempty"`
	Attrs6      map[string]string `protobuf:"bytes,22,rep,name=Attrs6" json:"Attrs6,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Attrs6Key   []string          `protobuf:"bytes,23,rep,name=Attrs6Key" json:"Attrs6Key,omitempty"`
	Attrs6Value []string          `protobuf:"bytes,24,rep,name=Attrs6Value" json:"Attrs6Value,omitempty"`
}

func (m *Item_StItemTemplate) Reset()                    { *m = Item_StItemTemplate{} }
func (m *Item_StItemTemplate) String() string            { return proto.CompactTextString(m) }
func (*Item_StItemTemplate) ProtoMessage()               {}
func (*Item_StItemTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Item_StItemTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item_StItemTemplate) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Item_StItemTemplate) GetSceneKey() string {
	if m != nil {
		return m.SceneKey
	}
	return ""
}

func (m *Item_StItemTemplate) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Item_StItemTemplate) GetItemType() int32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *Item_StItemTemplate) GetSubType() []int32 {
	if m != nil {
		return m.SubType
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs1() map[int32]int32 {
	if m != nil {
		return m.Attrs1
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs1Key() []int32 {
	if m != nil {
		return m.Attrs1Key
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs1Value() []int32 {
	if m != nil {
		return m.Attrs1Value
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs2() map[int32]int32 {
	if m != nil {
		return m.Attrs2
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs2Key() []int32 {
	if m != nil {
		return m.Attrs2Key
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs2Value() []int32 {
	if m != nil {
		return m.Attrs2Value
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs3() map[int32]int32 {
	if m != nil {
		return m.Attrs3
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs3Key() []int32 {
	if m != nil {
		return m.Attrs3Key
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs3Value() []int32 {
	if m != nil {
		return m.Attrs3Value
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs4() map[int32]int32 {
	if m != nil {
		return m.Attrs4
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs4Key() []int32 {
	if m != nil {
		return m.Attrs4Key
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs4Value() []int32 {
	if m != nil {
		return m.Attrs4Value
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs5() map[int32]int32 {
	if m != nil {
		return m.Attrs5
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs5Key() []int32 {
	if m != nil {
		return m.Attrs5Key
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs5Value() []int32 {
	if m != nil {
		return m.Attrs5Value
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs6() map[string]string {
	if m != nil {
		return m.Attrs6
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs6Key() []string {
	if m != nil {
		return m.Attrs6Key
	}
	return nil
}

func (m *Item_StItemTemplate) GetAttrs6Value() []string {
	if m != nil {
		return m.Attrs6Value
	}
	return nil
}

type Language struct {
	CommonKey   []string              `protobuf:"bytes,1,rep,name=CommonKey" json:"CommonKey,omitempty"`
	CommonValue []*Language_StCommon  `protobuf:"bytes,2,rep,name=CommonValue" json:"CommonValue,omitempty"`
	Special     []*Language_StSpecial `protobuf:"bytes,3,rep,name=Special" json:"Special,omitempty"`
	ErrorKey    []string              `protobuf:"bytes,4,rep,name=ErrorKey" json:"ErrorKey,omitempty"`
	ErrorValue  []*Language_StError   `protobuf:"bytes,5,rep,name=ErrorValue" json:"ErrorValue,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Language) GetCommonKey() []string {
	if m != nil {
		return m.CommonKey
	}
	return nil
}

func (m *Language) GetCommonValue() []*Language_StCommon {
	if m != nil {
		return m.CommonValue
	}
	return nil
}

func (m *Language) GetSpecial() []*Language_StSpecial {
	if m != nil {
		return m.Special
	}
	return nil
}

func (m *Language) GetErrorKey() []string {
	if m != nil {
		return m.ErrorKey
	}
	return nil
}

func (m *Language) GetErrorValue() []*Language_StError {
	if m != nil {
		return m.ErrorValue
	}
	return nil
}

type Language_StCommon struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StCommon) Reset()                    { *m = Language_StCommon{} }
func (m *Language_StCommon) String() string            { return proto.CompactTextString(m) }
func (*Language_StCommon) ProtoMessage()               {}
func (*Language_StCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *Language_StCommon) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Language_StSpecial struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StSpecial) Reset()                    { *m = Language_StSpecial{} }
func (m *Language_StSpecial) String() string            { return proto.CompactTextString(m) }
func (*Language_StSpecial) ProtoMessage()               {}
func (*Language_StSpecial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *Language_StSpecial) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Language_StError struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StError) Reset()                    { *m = Language_StError{} }
func (m *Language_StError) String() string            { return proto.CompactTextString(m) }
func (*Language_StError) ProtoMessage()               {}
func (*Language_StError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 2} }

func (m *Language_StError) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Grammar)(nil), "main.Grammar")
	proto.RegisterType((*ExcelExportTest)(nil), "main.ExcelExportTest")
	proto.RegisterType((*ExcelExportTest_StVIPmap)(nil), "main.ExcelExportTest.StVIPmap")
	proto.RegisterType((*ExcelExportTest_StVIPstruct)(nil), "main.ExcelExportTest.StVIPstruct")
	proto.RegisterType((*ExcelExportTest_StVIPlist)(nil), "main.ExcelExportTest.StVIPlist")
	proto.RegisterType((*Item)(nil), "main.Item")
	proto.RegisterType((*Item_StItemTemplate)(nil), "main.Item.StItemTemplate")
	proto.RegisterType((*Language)(nil), "main.Language")
	proto.RegisterType((*Language_StCommon)(nil), "main.Language.StCommon")
	proto.RegisterType((*Language_StSpecial)(nil), "main.Language.StSpecial")
	proto.RegisterType((*Language_StError)(nil), "main.Language.StError")
}

func init() { proto.RegisterFile("Config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xdf, 0x8f, 0xdb, 0x44,
	0x10, 0xc7, 0x95, 0xb3, 0x73, 0x89, 0x27, 0xd7, 0xdc, 0x75, 0x29, 0xed, 0x12, 0xa1, 0xd6, 0x0d,
	0x02, 0x2c, 0x1e, 0x22, 0xe1, 0x5f, 0xe2, 0x90, 0x10, 0x54, 0xd7, 0x53, 0x15, 0x81, 0x50, 0xb5,
	0xa9, 0xee, 0xdd, 0x8d, 0xb6, 0x51, 0x44, 0x6c, 0x47, 0xce, 0x06, 0x35, 0xcf, 0x45, 0xfc, 0x7f,
	0xfc, 0x33, 0x3c, 0xf0, 0x84, 0x76, 0x36, 0x5e, 0x4f, 0x92, 0xa3, 0x9c, 0xf2, 0xda, 0xbe, 0xed,
	0x7c, 0xf7, 0x3b, 0xf3, 0xd9, 0x9d, 0x1b, 0xdb, 0x17, 0x38, 0xbb, 0x2a, 0x8b, 0x37, 0xf3, 0xd9,
	0x68, 0x59, 0x95, 0xaa, 0x64, 0x6e, 0x9e, 0xcd, 0x8b, 0xe1, 0x17, 0xd0, 0x79, 0x51, 0x65, 0x79,
	0x9e, 0x55, 0x8c, 0x43, 0x67, 0x66, 0x96, 0xbc, 0xe5, 0xb7, 0x02, 0x4f, 0xd4, 0xe1, 0xf0, 0x5d,
	0x1f, 0xce, 0xaf, 0xdf, 0x4e, 0xe5, 0xe2, 0xfa, 0xed, 0xb2, 0xac, 0xd4, 0x2b, 0xb9, 0x52, 0xec,
	0x73, 0xf0, 0x6e, 0xc6, 0x2f, 0xf3, 0x6c, 0xf9, 0xb3, 0xdc, 0xf0, 0x96, 0xef, 0x04, 0x6d, 0xd1,
	0x08, 0xec, 0x27, 0xe8, 0x99, 0xe0, 0x26, 0x5b, 0xac, 0x25, 0x3f, 0xf1, 0x9d, 0xa0, 0x17, 0x3e,
	0x1e, 0x69, 0xe4, 0x68, 0xaf, 0xd2, 0x68, 0xa2, 0x8c, 0x55, 0xd0, 0x14, 0xf6, 0x23, 0xd6, 0x5f,
	0xa9, 0x6a, 0x3d, 0x55, 0xdc, 0xf1, 0x5b, 0x41, 0x2f, 0x7c, 0xfa, 0x9e, 0x7c, 0x63, 0x14, 0x4d,
	0x0e, 0xbb, 0x84, 0xce, 0xcd, 0xf8, 0xe5, 0x62, 0xbe, 0x52, 0xdc, 0x45, 0xfc, 0x93, 0xf7, 0xa4,
	0x6b, 0x9b, 0xa8, 0xfd, 0x83, 0x77, 0x2e, 0x74, 0xeb, 0x53, 0xe9, 0x8b, 0x8e, 0x8b, 0x37, 0xe5,
	0xb8, 0x50, 0x51, 0x88, 0x8d, 0x69, 0x8b, 0x46, 0x20, 0xbb, 0x69, 0xcc, 0x4f, 0xfc, 0x56, 0xe0,
	0x88, 0x46, 0xd0, 0x2d, 0xd5, 0xc1, 0x44, 0x55, 0x78, 0x05, 0x4f, 0xd4, 0x21, 0xfb, 0x0a, 0xfa,
	0xb6, 0xc8, 0xb3, 0xaa, 0xca, 0x36, 0x78, 0xc8, 0xb6, 0xd8, 0x53, 0x89, 0x2f, 0x8d, 0x8d, 0xaf,
	0xed, 0x3b, 0x81, 0x23, 0xf6, 0x54, 0x16, 0xc0, 0xf9, 0xb6, 0xf4, 0xbc, 0x98, 0x19, 0xe3, 0xa9,
	0xef, 0x04, 0x9e, 0xd8, 0x97, 0xd9, 0x10, 0xce, 0xc6, 0x4a, 0xe6, 0x57, 0x8b, 0xb9, 0x2c, 0xd4,
	0xf8, 0x39, 0xef, 0xe0, 0x95, 0x76, 0x34, 0xf6, 0x35, 0x74, 0xae, 0xca, 0x62, 0xb5, 0xce, 0x25,
	0xef, 0x62, 0xeb, 0xef, 0x99, 0xde, 0x6d, 0x47, 0x45, 0xd4, 0xbb, 0xec, 0x31, 0xc0, 0x75, 0xbe,
	0x54, 0x1b, 0xd3, 0x1d, 0x0f, 0x4b, 0x11, 0x85, 0xee, 0xa7, 0x31, 0x07, 0xec, 0x0f, 0x51, 0xd8,
	0x00, 0xba, 0x18, 0xe9, 0x0e, 0xf5, 0xb0, 0x43, 0x36, 0xd6, 0x57, 0x6a, 0x2a, 0x99, 0x2b, 0x9d,
	0x61, 0x8f, 0xf6, 0x65, 0xea, 0xac, 0xbb, 0x74, 0x0f, 0xbb, 0xb4, 0x2f, 0xb3, 0x6f, 0xe0, 0xa2,
	0xae, 0x6f, 0xfb, 0xd4, 0xc7, 0x3e, 0x1d, 0xe8, 0x83, 0x3f, 0x5d, 0xe8, 0x91, 0xd9, 0xfa, 0x38,
	0x08, 0x1f, 0xea, 0x20, 0xfc, 0xe1, 0x82, 0x67, 0xdf, 0x12, 0x1f, 0xc7, 0xe0, 0x03, 0x1d, 0x83,
	0xe1, 0xdf, 0x00, 0xae, 0xee, 0x0a, 0xf6, 0x56, 0xc9, 0xfc, 0x95, 0xcc, 0x97, 0x8b, 0x4c, 0xc9,
	0xe6, 0x03, 0xb8, 0x2f, 0xb3, 0x17, 0x70, 0x9f, 0x4a, 0xf4, 0x63, 0xf8, 0x99, 0xe9, 0xa0, 0xde,
	0x1e, 0x4d, 0x14, 0x75, 0x89, 0xc3, 0x9c, 0xc1, 0x3f, 0x1e, 0xf4, 0x77, 0x5d, 0x8c, 0x81, 0xfb,
	0x6b, 0x96, 0xcb, 0xed, 0xb7, 0x1a, 0xd7, 0x5a, 0x7b, 0x2e, 0x57, 0x53, 0x1c, 0x3c, 0x4f, 0xe0,
	0x5a, 0xb7, 0x74, 0x32, 0x95, 0x05, 0x1e, 0xd3, 0x0c, 0x9d, 0x8d, 0xb5, 0x7f, 0x3c, 0x2d, 0x0b,
	0xee, 0x1a, 0xbf, 0x5e, 0x6b, 0x3f, 0x72, 0x36, 0x4b, 0xc9, 0xdb, 0xf8, 0x07, 0xb4, 0xb1, 0x9e,
	0xdf, 0xc9, 0xfa, 0x35, 0x6e, 0x9d, 0xe2, 0x8d, 0xeb, 0x90, 0xfd, 0x00, 0xa7, 0xcf, 0x94, 0xaa,
	0x56, 0xdf, 0xf2, 0x0e, 0x5e, 0xef, 0xcb, 0xff, 0xbc, 0xde, 0xc8, 0xf8, 0xae, 0x0b, 0x55, 0x6d,
	0xc4, 0x36, 0x49, 0x3f, 0x36, 0x66, 0xa5, 0x4f, 0xd9, 0x35, 0xff, 0x4d, 0x58, 0x81, 0xf9, 0xd0,
	0x33, 0x81, 0x69, 0xa0, 0x87, 0xfb, 0x54, 0xb2, 0xf8, 0x90, 0xc3, 0x9d, 0xf0, 0x21, 0xc5, 0x87,
	0x16, 0x1f, 0x6a, 0x7c, 0x8f, 0xe0, 0x43, 0x8a, 0x0f, 0x0d, 0xfe, 0x8c, 0xe0, 0xc3, 0x5d, 0x7c,
	0x84, 0x73, 0xf6, 0xff, 0xf8, 0x88, 0xe2, 0x23, 0x8b, 0x8f, 0x34, 0xbe, 0x4f, 0xf0, 0x11, 0xc5,
	0x47, 0x06, 0x7f, 0x4e, 0xf0, 0xd1, 0x2e, 0x3e, 0xe6, 0x17, 0x77, 0xc2, 0xc7, 0x14, 0x1f, 0x5b,
	0x7c, 0xac, 0xf1, 0xf7, 0x09, 0x3e, 0xa6, 0xf8, 0xd8, 0xe0, 0x19, 0xc1, 0xc7, 0xbb, 0xf8, 0x84,
	0x7f, 0x72, 0x27, 0x7c, 0x42, 0xf1, 0x89, 0xc5, 0x27, 0x1a, 0xff, 0x80, 0xe0, 0x13, 0x8a, 0x4f,
	0x0c, 0xfe, 0x53, 0x82, 0x4f, 0x76, 0xf1, 0x29, 0x7f, 0x78, 0x27, 0x7c, 0x4a, 0xf1, 0xa9, 0xc5,
	0xa7, 0x1a, 0xff, 0x08, 0x9f, 0xfd, 0x46, 0xb0, 0xf8, 0xd4, 0xe0, 0x39, 0xee, 0x53, 0x69, 0x70,
	0x59, 0x0f, 0x27, 0x96, 0x65, 0x17, 0xe0, 0xfc, 0x86, 0x2f, 0x04, 0xfd, 0xe4, 0xe8, 0x25, 0x7b,
	0x00, 0xed, 0xdf, 0xb7, 0x0f, 0xbe, 0xd6, 0x4c, 0xf0, 0xfd, 0xc9, 0x77, 0x2d, 0x9b, 0x1a, 0x1e,
	0x9f, 0x1a, 0x1d, 0x9f, 0x1a, 0x1f, 0x9f, 0x9a, 0x1c, 0x9f, 0x9a, 0x1e, 0xa4, 0x7a, 0xb7, 0xa4,
	0x7a, 0x24, 0x75, 0xf8, 0xd7, 0x09, 0x74, 0x7f, 0xc9, 0x8a, 0xd9, 0x3a, 0x9b, 0x49, 0xfd, 0xe7,
	0xba, 0x2a, 0xf3, 0xbc, 0x2c, 0xea, 0xd7, 0xae, 0x27, 0x1a, 0x81, 0x5d, 0x42, 0xcf, 0x04, 0xf4,
	0x55, 0xfb, 0xc8, 0x0c, 0x44, 0x5d, 0x62, 0x34, 0x51, 0xc6, 0x23, 0xa8, 0x97, 0x85, 0xd0, 0x99,
	0x2c, 0xe5, 0x74, 0x9e, 0x2d, 0xb8, 0x83, 0x69, 0xfc, 0x20, 0x6d, 0xbb, 0x2f, 0x6a, 0x23, 0x7e,
	0xae, 0xaa, 0xaa, 0xac, 0xf4, 0x59, 0x5c, 0x3c, 0x8b, 0x8d, 0x59, 0x0a, 0x80, 0x6b, 0x73, 0x92,
	0x36, 0x96, 0x7c, 0x78, 0x50, 0x12, 0x2d, 0x82, 0x38, 0x07, 0xbe, 0xfe, 0xed, 0x61, 0x0e, 0xa6,
	0x7b, 0x62, 0xd2, 0x4d, 0x9f, 0x4c, 0x30, 0x78, 0xaa, 0xff, 0x1d, 0xa9, 0x8f, 0x70, 0xbb, 0xe5,
	0x09, 0x74, 0xb6, 0xb5, 0x6f, 0x37, 0xbc, 0x3e, 0xc5, 0x1f, 0x81, 0xd1, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xd1, 0xb2, 0x6d, 0xef, 0x14, 0x0e, 0x00, 0x00,
}
