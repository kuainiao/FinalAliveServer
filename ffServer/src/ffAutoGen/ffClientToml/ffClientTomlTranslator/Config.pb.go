// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Config.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	Config.proto

It has these top-level messages:
	Grammar
	Asset
	ExcelExportTest
	HitEffect
	Item
	Language
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Grammar struct {
	Grammar string `protobuf:"bytes,1,opt,name=grammar" json:"grammar,omitempty"`
}

func (m *Grammar) Reset()                    { *m = Grammar{} }
func (m *Grammar) String() string            { return proto.CompactTextString(m) }
func (*Grammar) ProtoMessage()               {}
func (*Grammar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Grammar) GetGrammar() string {
	if m != nil {
		return m.Grammar
	}
	return ""
}

type Asset struct {
	AssetsKey   []int32           `protobuf:"varint,1,rep,packed,name=AssetsKey" json:"AssetsKey,omitempty"`
	AssetsValue []*Asset_StAssets `protobuf:"bytes,2,rep,name=AssetsValue" json:"AssetsValue,omitempty"`
}

func (m *Asset) Reset()                    { *m = Asset{} }
func (m *Asset) String() string            { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()               {}
func (*Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Asset) GetAssetsKey() []int32 {
	if m != nil {
		return m.AssetsKey
	}
	return nil
}

func (m *Asset) GetAssetsValue() []*Asset_StAssets {
	if m != nil {
		return m.AssetsValue
	}
	return nil
}

type Asset_StAssets struct {
	IsDefault     int32  `protobuf:"varint,1,opt,name=IsDefault" json:"IsDefault,omitempty"`
	BattleDefault string `protobuf:"bytes,2,opt,name=BattleDefault" json:"BattleDefault,omitempty"`
	HomeDefault   string `protobuf:"bytes,3,opt,name=HomeDefault" json:"HomeDefault,omitempty"`
	SceneDefault  string `protobuf:"bytes,4,opt,name=SceneDefault" json:"SceneDefault,omitempty"`
}

func (m *Asset_StAssets) Reset()                    { *m = Asset_StAssets{} }
func (m *Asset_StAssets) String() string            { return proto.CompactTextString(m) }
func (*Asset_StAssets) ProtoMessage()               {}
func (*Asset_StAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Asset_StAssets) GetIsDefault() int32 {
	if m != nil {
		return m.IsDefault
	}
	return 0
}

func (m *Asset_StAssets) GetBattleDefault() string {
	if m != nil {
		return m.BattleDefault
	}
	return ""
}

func (m *Asset_StAssets) GetHomeDefault() string {
	if m != nil {
		return m.HomeDefault
	}
	return ""
}

func (m *Asset_StAssets) GetSceneDefault() string {
	if m != nil {
		return m.SceneDefault
	}
	return ""
}

type ExcelExportTest struct {
	VIPmapKey   []int32                      `protobuf:"varint,1,rep,packed,name=VIPmapKey" json:"VIPmapKey,omitempty"`
	VIPmapValue []*ExcelExportTest_StVIPmap  `protobuf:"bytes,2,rep,name=VIPmapValue" json:"VIPmapValue,omitempty"`
	VIPstruct   *ExcelExportTest_StVIPstruct `protobuf:"bytes,3,opt,name=VIPstruct" json:"VIPstruct,omitempty"`
	VIPlist     []*ExcelExportTest_StVIPlist `protobuf:"bytes,4,rep,name=VIPlist" json:"VIPlist,omitempty"`
}

func (m *ExcelExportTest) Reset()                    { *m = ExcelExportTest{} }
func (m *ExcelExportTest) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest) ProtoMessage()               {}
func (*ExcelExportTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExcelExportTest) GetVIPmapKey() []int32 {
	if m != nil {
		return m.VIPmapKey
	}
	return nil
}

func (m *ExcelExportTest) GetVIPmapValue() []*ExcelExportTest_StVIPmap {
	if m != nil {
		return m.VIPmapValue
	}
	return nil
}

func (m *ExcelExportTest) GetVIPstruct() *ExcelExportTest_StVIPstruct {
	if m != nil {
		return m.VIPstruct
	}
	return nil
}

func (m *ExcelExportTest) GetVIPlist() []*ExcelExportTest_StVIPlist {
	if m != nil {
		return m.VIPlist
	}
	return nil
}

type ExcelExportTest_StVIPmap struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPmap) Reset()                    { *m = ExcelExportTest_StVIPmap{} }
func (m *ExcelExportTest_StVIPmap) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPmap) ProtoMessage()               {}
func (*ExcelExportTest_StVIPmap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *ExcelExportTest_StVIPmap) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type ExcelExportTest_StVIPstruct struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPstruct) Reset()                    { *m = ExcelExportTest_StVIPstruct{} }
func (m *ExcelExportTest_StVIPstruct) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPstruct) ProtoMessage()               {}
func (*ExcelExportTest_StVIPstruct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type ExcelExportTest_StVIPlist struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPlist) Reset()                    { *m = ExcelExportTest_StVIPlist{} }
func (m *ExcelExportTest_StVIPlist) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPlist) ProtoMessage()               {}
func (*ExcelExportTest_StVIPlist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 2} }

func (m *ExcelExportTest_StVIPlist) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type HitEffect struct {
	HitKey   []string           `protobuf:"bytes,1,rep,name=HitKey" json:"HitKey,omitempty"`
	HitValue []*HitEffect_StHit `protobuf:"bytes,2,rep,name=HitValue" json:"HitValue,omitempty"`
}

func (m *HitEffect) Reset()                    { *m = HitEffect{} }
func (m *HitEffect) String() string            { return proto.CompactTextString(m) }
func (*HitEffect) ProtoMessage()               {}
func (*HitEffect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HitEffect) GetHitKey() []string {
	if m != nil {
		return m.HitKey
	}
	return nil
}

func (m *HitEffect) GetHitValue() []*HitEffect_StHit {
	if m != nil {
		return m.HitValue
	}
	return nil
}

type HitEffect_StHit struct {
	Gun int32 `protobuf:"varint,1,opt,name=Gun" json:"Gun,omitempty"`
}

func (m *HitEffect_StHit) Reset()                    { *m = HitEffect_StHit{} }
func (m *HitEffect_StHit) String() string            { return proto.CompactTextString(m) }
func (*HitEffect_StHit) ProtoMessage()               {}
func (*HitEffect_StHit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *HitEffect_StHit) GetGun() int32 {
	if m != nil {
		return m.Gun
	}
	return 0
}

type Item struct {
	ItemTemplateKey   []int32                `protobuf:"varint,1,rep,packed,name=ItemTemplateKey" json:"ItemTemplateKey,omitempty"`
	ItemTemplateValue []*Item_StItemTemplate `protobuf:"bytes,2,rep,name=ItemTemplateValue" json:"ItemTemplateValue,omitempty"`
	GunWeaponKey      []int32                `protobuf:"varint,3,rep,packed,name=GunWeaponKey" json:"GunWeaponKey,omitempty"`
	GunWeaponValue    []*Item_StGunWeapon    `protobuf:"bytes,4,rep,name=GunWeaponValue" json:"GunWeaponValue,omitempty"`
	AmmunitionKey     []int32                `protobuf:"varint,5,rep,packed,name=AmmunitionKey" json:"AmmunitionKey,omitempty"`
	AmmunitionValue   []*Item_StAmmunition   `protobuf:"bytes,6,rep,name=AmmunitionValue" json:"AmmunitionValue,omitempty"`
	AttachmentKey     []int32                `protobuf:"varint,7,rep,packed,name=AttachmentKey" json:"AttachmentKey,omitempty"`
	AttachmentValue   []*Item_StAttachment   `protobuf:"bytes,8,rep,name=AttachmentValue" json:"AttachmentValue,omitempty"`
	MelleeWeaponKey   []int32                `protobuf:"varint,9,rep,packed,name=MelleeWeaponKey" json:"MelleeWeaponKey,omitempty"`
	MelleeWeaponValue []*Item_StMelleeWeapon `protobuf:"bytes,10,rep,name=MelleeWeaponValue" json:"MelleeWeaponValue,omitempty"`
	ArmorKey          []int32                `protobuf:"varint,11,rep,packed,name=ArmorKey" json:"ArmorKey,omitempty"`
	ArmorValue        []*Item_StArmor        `protobuf:"bytes,12,rep,name=ArmorValue" json:"ArmorValue,omitempty"`
	ConsumableKey     []int32                `protobuf:"varint,13,rep,packed,name=ConsumableKey" json:"ConsumableKey,omitempty"`
	ConsumableValue   []*Item_StConsumable   `protobuf:"bytes,14,rep,name=ConsumableValue" json:"ConsumableValue,omitempty"`
	ThrowableKey      []int32                `protobuf:"varint,15,rep,packed,name=ThrowableKey" json:"ThrowableKey,omitempty"`
	ThrowableValue    []*Item_StThrowable    `protobuf:"bytes,16,rep,name=ThrowableValue" json:"ThrowableValue,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Item) GetItemTemplateKey() []int32 {
	if m != nil {
		return m.ItemTemplateKey
	}
	return nil
}

func (m *Item) GetItemTemplateValue() []*Item_StItemTemplate {
	if m != nil {
		return m.ItemTemplateValue
	}
	return nil
}

func (m *Item) GetGunWeaponKey() []int32 {
	if m != nil {
		return m.GunWeaponKey
	}
	return nil
}

func (m *Item) GetGunWeaponValue() []*Item_StGunWeapon {
	if m != nil {
		return m.GunWeaponValue
	}
	return nil
}

func (m *Item) GetAmmunitionKey() []int32 {
	if m != nil {
		return m.AmmunitionKey
	}
	return nil
}

func (m *Item) GetAmmunitionValue() []*Item_StAmmunition {
	if m != nil {
		return m.AmmunitionValue
	}
	return nil
}

func (m *Item) GetAttachmentKey() []int32 {
	if m != nil {
		return m.AttachmentKey
	}
	return nil
}

func (m *Item) GetAttachmentValue() []*Item_StAttachment {
	if m != nil {
		return m.AttachmentValue
	}
	return nil
}

func (m *Item) GetMelleeWeaponKey() []int32 {
	if m != nil {
		return m.MelleeWeaponKey
	}
	return nil
}

func (m *Item) GetMelleeWeaponValue() []*Item_StMelleeWeapon {
	if m != nil {
		return m.MelleeWeaponValue
	}
	return nil
}

func (m *Item) GetArmorKey() []int32 {
	if m != nil {
		return m.ArmorKey
	}
	return nil
}

func (m *Item) GetArmorValue() []*Item_StArmor {
	if m != nil {
		return m.ArmorValue
	}
	return nil
}

func (m *Item) GetConsumableKey() []int32 {
	if m != nil {
		return m.ConsumableKey
	}
	return nil
}

func (m *Item) GetConsumableValue() []*Item_StConsumable {
	if m != nil {
		return m.ConsumableValue
	}
	return nil
}

func (m *Item) GetThrowableKey() []int32 {
	if m != nil {
		return m.ThrowableKey
	}
	return nil
}

func (m *Item) GetThrowableValue() []*Item_StThrowable {
	if m != nil {
		return m.ThrowableValue
	}
	return nil
}

type Item_StItemTemplate struct {
	Name       string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Desc       string `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
	AssetID    int32  `protobuf:"varint,3,opt,name=AssetID" json:"AssetID,omitempty"`
	IconNormal string `protobuf:"bytes,4,opt,name=IconNormal" json:"IconNormal,omitempty"`
	IconLarge  string `protobuf:"bytes,5,opt,name=IconLarge" json:"IconLarge,omitempty"`
	ItemType   int32  `protobuf:"varint,6,opt,name=ItemType" json:"ItemType,omitempty"`
}

func (m *Item_StItemTemplate) Reset()                    { *m = Item_StItemTemplate{} }
func (m *Item_StItemTemplate) String() string            { return proto.CompactTextString(m) }
func (*Item_StItemTemplate) ProtoMessage()               {}
func (*Item_StItemTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *Item_StItemTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item_StItemTemplate) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Item_StItemTemplate) GetAssetID() int32 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *Item_StItemTemplate) GetIconNormal() string {
	if m != nil {
		return m.IconNormal
	}
	return ""
}

func (m *Item_StItemTemplate) GetIconLarge() string {
	if m != nil {
		return m.IconLarge
	}
	return ""
}

func (m *Item_StItemTemplate) GetItemType() int32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

type Item_StGunWeapon struct {
	GunWeaponType   int32           `protobuf:"varint,1,opt,name=GunWeaponType" json:"GunWeaponType,omitempty"`
	ShootMode       []int32         `protobuf:"varint,2,rep,packed,name=ShootMode" json:"ShootMode,omitempty"`
	Ammunition      int32           `protobuf:"varint,3,opt,name=Ammunition" json:"Ammunition,omitempty"`
	AttachmentTypes []int32         `protobuf:"varint,4,rep,packed,name=AttachmentTypes" json:"AttachmentTypes,omitempty"`
	Attrs           map[int32]int32 `protobuf:"bytes,5,rep,name=Attrs" json:"Attrs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AttrsKey        []int32         `protobuf:"varint,6,rep,packed,name=AttrsKey" json:"AttrsKey,omitempty"`
	AttrsValue      []int32         `protobuf:"varint,7,rep,packed,name=AttrsValue" json:"AttrsValue,omitempty"`
}

func (m *Item_StGunWeapon) Reset()                    { *m = Item_StGunWeapon{} }
func (m *Item_StGunWeapon) String() string            { return proto.CompactTextString(m) }
func (*Item_StGunWeapon) ProtoMessage()               {}
func (*Item_StGunWeapon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

func (m *Item_StGunWeapon) GetGunWeaponType() int32 {
	if m != nil {
		return m.GunWeaponType
	}
	return 0
}

func (m *Item_StGunWeapon) GetShootMode() []int32 {
	if m != nil {
		return m.ShootMode
	}
	return nil
}

func (m *Item_StGunWeapon) GetAmmunition() int32 {
	if m != nil {
		return m.Ammunition
	}
	return 0
}

func (m *Item_StGunWeapon) GetAttachmentTypes() []int32 {
	if m != nil {
		return m.AttachmentTypes
	}
	return nil
}

func (m *Item_StGunWeapon) GetAttrs() map[int32]int32 {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *Item_StGunWeapon) GetAttrsKey() []int32 {
	if m != nil {
		return m.AttrsKey
	}
	return nil
}

func (m *Item_StGunWeapon) GetAttrsValue() []int32 {
	if m != nil {
		return m.AttrsValue
	}
	return nil
}

type Item_StAmmunition struct {
	AmmunitionType  int32 `protobuf:"varint,1,opt,name=AmmunitionType" json:"AmmunitionType,omitempty"`
	AmmunitionStack int32 `protobuf:"varint,2,opt,name=AmmunitionStack" json:"AmmunitionStack,omitempty"`
}

func (m *Item_StAmmunition) Reset()                    { *m = Item_StAmmunition{} }
func (m *Item_StAmmunition) String() string            { return proto.CompactTextString(m) }
func (*Item_StAmmunition) ProtoMessage()               {}
func (*Item_StAmmunition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 2} }

func (m *Item_StAmmunition) GetAmmunitionType() int32 {
	if m != nil {
		return m.AmmunitionType
	}
	return 0
}

func (m *Item_StAmmunition) GetAmmunitionStack() int32 {
	if m != nil {
		return m.AmmunitionStack
	}
	return 0
}

type Item_StAttachment struct {
	AttachmentType int32           `protobuf:"varint,1,opt,name=AttachmentType" json:"AttachmentType,omitempty"`
	GunWeapons     []int32         `protobuf:"varint,2,rep,packed,name=GunWeapons" json:"GunWeapons,omitempty"`
	ShutSound      int32           `protobuf:"varint,3,opt,name=ShutSound" json:"ShutSound,omitempty"`
	ShutFire       int32           `protobuf:"varint,4,opt,name=ShutFire" json:"ShutFire,omitempty"`
	Attrs          map[int32]int32 `protobuf:"bytes,5,rep,name=Attrs" json:"Attrs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AttrsKey       []int32         `protobuf:"varint,6,rep,packed,name=AttrsKey" json:"AttrsKey,omitempty"`
	AttrsValue     []int32         `protobuf:"varint,7,rep,packed,name=AttrsValue" json:"AttrsValue,omitempty"`
	Clip           map[int32]int32 `protobuf:"bytes,8,rep,name=Clip" json:"Clip,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ClipKey        []int32         `protobuf:"varint,9,rep,packed,name=ClipKey" json:"ClipKey,omitempty"`
	ClipValue      []int32         `protobuf:"varint,10,rep,packed,name=ClipValue" json:"ClipValue,omitempty"`
}

func (m *Item_StAttachment) Reset()                    { *m = Item_StAttachment{} }
func (m *Item_StAttachment) String() string            { return proto.CompactTextString(m) }
func (*Item_StAttachment) ProtoMessage()               {}
func (*Item_StAttachment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 3} }

func (m *Item_StAttachment) GetAttachmentType() int32 {
	if m != nil {
		return m.AttachmentType
	}
	return 0
}

func (m *Item_StAttachment) GetGunWeapons() []int32 {
	if m != nil {
		return m.GunWeapons
	}
	return nil
}

func (m *Item_StAttachment) GetShutSound() int32 {
	if m != nil {
		return m.ShutSound
	}
	return 0
}

func (m *Item_StAttachment) GetShutFire() int32 {
	if m != nil {
		return m.ShutFire
	}
	return 0
}

func (m *Item_StAttachment) GetAttrs() map[int32]int32 {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *Item_StAttachment) GetAttrsKey() []int32 {
	if m != nil {
		return m.AttrsKey
	}
	return nil
}

func (m *Item_StAttachment) GetAttrsValue() []int32 {
	if m != nil {
		return m.AttrsValue
	}
	return nil
}

func (m *Item_StAttachment) GetClip() map[int32]int32 {
	if m != nil {
		return m.Clip
	}
	return nil
}

func (m *Item_StAttachment) GetClipKey() []int32 {
	if m != nil {
		return m.ClipKey
	}
	return nil
}

func (m *Item_StAttachment) GetClipValue() []int32 {
	if m != nil {
		return m.ClipValue
	}
	return nil
}

type Item_StMelleeWeapon struct {
	MelleeWeaponType int32           `protobuf:"varint,1,opt,name=MelleeWeaponType" json:"MelleeWeaponType,omitempty"`
	Attrs            map[int32]int32 `protobuf:"bytes,2,rep,name=Attrs" json:"Attrs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AttrsKey         []int32         `protobuf:"varint,3,rep,packed,name=AttrsKey" json:"AttrsKey,omitempty"`
	AttrsValue       []int32         `protobuf:"varint,4,rep,packed,name=AttrsValue" json:"AttrsValue,omitempty"`
}

func (m *Item_StMelleeWeapon) Reset()                    { *m = Item_StMelleeWeapon{} }
func (m *Item_StMelleeWeapon) String() string            { return proto.CompactTextString(m) }
func (*Item_StMelleeWeapon) ProtoMessage()               {}
func (*Item_StMelleeWeapon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 4} }

func (m *Item_StMelleeWeapon) GetMelleeWeaponType() int32 {
	if m != nil {
		return m.MelleeWeaponType
	}
	return 0
}

func (m *Item_StMelleeWeapon) GetAttrs() map[int32]int32 {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *Item_StMelleeWeapon) GetAttrsKey() []int32 {
	if m != nil {
		return m.AttrsKey
	}
	return nil
}

func (m *Item_StMelleeWeapon) GetAttrsValue() []int32 {
	if m != nil {
		return m.AttrsValue
	}
	return nil
}

type Item_StArmor struct {
	EArmorType int32           `protobuf:"varint,1,opt,name=EArmorType" json:"EArmorType,omitempty"`
	Attrs      map[int32]int32 `protobuf:"bytes,2,rep,name=Attrs" json:"Attrs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AttrsKey   []int32         `protobuf:"varint,3,rep,packed,name=AttrsKey" json:"AttrsKey,omitempty"`
	AttrsValue []int32         `protobuf:"varint,4,rep,packed,name=AttrsValue" json:"AttrsValue,omitempty"`
}

func (m *Item_StArmor) Reset()                    { *m = Item_StArmor{} }
func (m *Item_StArmor) String() string            { return proto.CompactTextString(m) }
func (*Item_StArmor) ProtoMessage()               {}
func (*Item_StArmor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 5} }

func (m *Item_StArmor) GetEArmorType() int32 {
	if m != nil {
		return m.EArmorType
	}
	return 0
}

func (m *Item_StArmor) GetAttrs() map[int32]int32 {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *Item_StArmor) GetAttrsKey() []int32 {
	if m != nil {
		return m.AttrsKey
	}
	return nil
}

func (m *Item_StArmor) GetAttrsValue() []int32 {
	if m != nil {
		return m.AttrsValue
	}
	return nil
}

type Item_StConsumable struct {
	ConsumableType      int32 `protobuf:"varint,1,opt,name=ConsumableType" json:"ConsumableType,omitempty"`
	UseTime             int32 `protobuf:"varint,2,opt,name=UseTime" json:"UseTime,omitempty"`
	UseHpLimit          int32 `protobuf:"varint,3,opt,name=UseHpLimit" json:"UseHpLimit,omitempty"`
	UseRecover          int32 `protobuf:"varint,4,opt,name=UseRecover" json:"UseRecover,omitempty"`
	UseRecoverUpLimit   int32 `protobuf:"varint,5,opt,name=UseRecoverUpLimit" json:"UseRecoverUpLimit,omitempty"`
	KeepTime            int32 `protobuf:"varint,6,opt,name=KeepTime" json:"KeepTime,omitempty"`
	KeepRecoverInterval int32 `protobuf:"varint,7,opt,name=KeepRecoverInterval" json:"KeepRecoverInterval,omitempty"`
	KeepRecover         int32 `protobuf:"varint,8,opt,name=KeepRecover" json:"KeepRecover,omitempty"`
}

func (m *Item_StConsumable) Reset()                    { *m = Item_StConsumable{} }
func (m *Item_StConsumable) String() string            { return proto.CompactTextString(m) }
func (*Item_StConsumable) ProtoMessage()               {}
func (*Item_StConsumable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 6} }

func (m *Item_StConsumable) GetConsumableType() int32 {
	if m != nil {
		return m.ConsumableType
	}
	return 0
}

func (m *Item_StConsumable) GetUseTime() int32 {
	if m != nil {
		return m.UseTime
	}
	return 0
}

func (m *Item_StConsumable) GetUseHpLimit() int32 {
	if m != nil {
		return m.UseHpLimit
	}
	return 0
}

func (m *Item_StConsumable) GetUseRecover() int32 {
	if m != nil {
		return m.UseRecover
	}
	return 0
}

func (m *Item_StConsumable) GetUseRecoverUpLimit() int32 {
	if m != nil {
		return m.UseRecoverUpLimit
	}
	return 0
}

func (m *Item_StConsumable) GetKeepTime() int32 {
	if m != nil {
		return m.KeepTime
	}
	return 0
}

func (m *Item_StConsumable) GetKeepRecoverInterval() int32 {
	if m != nil {
		return m.KeepRecoverInterval
	}
	return 0
}

func (m *Item_StConsumable) GetKeepRecover() int32 {
	if m != nil {
		return m.KeepRecover
	}
	return 0
}

type Item_StThrowable struct {
	ThrowableType int32 `protobuf:"varint,1,opt,name=ThrowableType" json:"ThrowableType,omitempty"`
	RadiusClose   int32 `protobuf:"varint,2,opt,name=RadiusClose" json:"RadiusClose,omitempty"`
}

func (m *Item_StThrowable) Reset()                    { *m = Item_StThrowable{} }
func (m *Item_StThrowable) String() string            { return proto.CompactTextString(m) }
func (*Item_StThrowable) ProtoMessage()               {}
func (*Item_StThrowable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 7} }

func (m *Item_StThrowable) GetThrowableType() int32 {
	if m != nil {
		return m.ThrowableType
	}
	return 0
}

func (m *Item_StThrowable) GetRadiusClose() int32 {
	if m != nil {
		return m.RadiusClose
	}
	return 0
}

type Language struct {
	CommonKey   []string              `protobuf:"bytes,1,rep,name=CommonKey" json:"CommonKey,omitempty"`
	CommonValue []*Language_StCommon  `protobuf:"bytes,2,rep,name=CommonValue" json:"CommonValue,omitempty"`
	Special     []*Language_StSpecial `protobuf:"bytes,3,rep,name=Special" json:"Special,omitempty"`
	ErrorKey    []string              `protobuf:"bytes,4,rep,name=ErrorKey" json:"ErrorKey,omitempty"`
	ErrorValue  []*Language_StError   `protobuf:"bytes,5,rep,name=ErrorValue" json:"ErrorValue,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Language) GetCommonKey() []string {
	if m != nil {
		return m.CommonKey
	}
	return nil
}

func (m *Language) GetCommonValue() []*Language_StCommon {
	if m != nil {
		return m.CommonValue
	}
	return nil
}

func (m *Language) GetSpecial() []*Language_StSpecial {
	if m != nil {
		return m.Special
	}
	return nil
}

func (m *Language) GetErrorKey() []string {
	if m != nil {
		return m.ErrorKey
	}
	return nil
}

func (m *Language) GetErrorValue() []*Language_StError {
	if m != nil {
		return m.ErrorValue
	}
	return nil
}

type Language_StCommon struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StCommon) Reset()                    { *m = Language_StCommon{} }
func (m *Language_StCommon) String() string            { return proto.CompactTextString(m) }
func (*Language_StCommon) ProtoMessage()               {}
func (*Language_StCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *Language_StCommon) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Language_StSpecial struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StSpecial) Reset()                    { *m = Language_StSpecial{} }
func (m *Language_StSpecial) String() string            { return proto.CompactTextString(m) }
func (*Language_StSpecial) ProtoMessage()               {}
func (*Language_StSpecial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 1} }

func (m *Language_StSpecial) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Language_StError struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StError) Reset()                    { *m = Language_StError{} }
func (m *Language_StError) String() string            { return proto.CompactTextString(m) }
func (*Language_StError) ProtoMessage()               {}
func (*Language_StError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 2} }

func (m *Language_StError) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Grammar)(nil), "main.Grammar")
	proto.RegisterType((*Asset)(nil), "main.Asset")
	proto.RegisterType((*Asset_StAssets)(nil), "main.Asset.StAssets")
	proto.RegisterType((*ExcelExportTest)(nil), "main.ExcelExportTest")
	proto.RegisterType((*ExcelExportTest_StVIPmap)(nil), "main.ExcelExportTest.StVIPmap")
	proto.RegisterType((*ExcelExportTest_StVIPstruct)(nil), "main.ExcelExportTest.StVIPstruct")
	proto.RegisterType((*ExcelExportTest_StVIPlist)(nil), "main.ExcelExportTest.StVIPlist")
	proto.RegisterType((*HitEffect)(nil), "main.HitEffect")
	proto.RegisterType((*HitEffect_StHit)(nil), "main.HitEffect.StHit")
	proto.RegisterType((*Item)(nil), "main.Item")
	proto.RegisterType((*Item_StItemTemplate)(nil), "main.Item.StItemTemplate")
	proto.RegisterType((*Item_StGunWeapon)(nil), "main.Item.StGunWeapon")
	proto.RegisterType((*Item_StAmmunition)(nil), "main.Item.StAmmunition")
	proto.RegisterType((*Item_StAttachment)(nil), "main.Item.StAttachment")
	proto.RegisterType((*Item_StMelleeWeapon)(nil), "main.Item.StMelleeWeapon")
	proto.RegisterType((*Item_StArmor)(nil), "main.Item.StArmor")
	proto.RegisterType((*Item_StConsumable)(nil), "main.Item.StConsumable")
	proto.RegisterType((*Item_StThrowable)(nil), "main.Item.StThrowable")
	proto.RegisterType((*Language)(nil), "main.Language")
	proto.RegisterType((*Language_StCommon)(nil), "main.Language.StCommon")
	proto.RegisterType((*Language_StSpecial)(nil), "main.Language.StSpecial")
	proto.RegisterType((*Language_StError)(nil), "main.Language.StError")
}

func init() { proto.RegisterFile("Config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0x96, 0xd7, 0x9e, 0xb5, 0x5d, 0xde, 0x9f, 0xa4, 0x49, 0x82, 0x33, 0x82, 0xc4, 0x31, 0x11,
	0xac, 0x10, 0xb2, 0x60, 0x13, 0x36, 0x3f, 0x07, 0x60, 0xd9, 0x5d, 0x76, 0xad, 0xfc, 0x28, 0x6a,
	0xef, 0x86, 0x2b, 0x13, 0xa7, 0x77, 0x33, 0xca, 0xfc, 0x98, 0x99, 0x76, 0x88, 0xcf, 0x41, 0x3c,
	0x01, 0x8f, 0x81, 0x78, 0x10, 0x6e, 0x48, 0x1c, 0x78, 0x04, 0x4e, 0x9c, 0x78, 0x00, 0x54, 0xd5,
	0x3d, 0xdd, 0x3d, 0x63, 0x67, 0x11, 0x22, 0x07, 0xa4, 0xe4, 0xb4, 0x5d, 0x5f, 0x7f, 0x5d, 0xd5,
	0x53, 0x55, 0x5d, 0x55, 0x5e, 0x58, 0xd9, 0x49, 0x93, 0xe3, 0xf0, 0x64, 0x30, 0xc9, 0x52, 0x99,
	0xb2, 0x46, 0x1c, 0x84, 0x49, 0xff, 0x3d, 0x68, 0xee, 0x67, 0x41, 0x1c, 0x07, 0x19, 0xeb, 0x42,
	0xf3, 0x44, 0x2d, 0xbb, 0xb5, 0x5e, 0x6d, 0xa3, 0xcd, 0x0b, 0xb1, 0xff, 0x57, 0x0d, 0xbc, 0xed,
	0x3c, 0x17, 0x92, 0xbd, 0x03, 0x6d, 0x5a, 0xe4, 0x77, 0xc4, 0xac, 0x5b, 0xeb, 0xd5, 0x37, 0x3c,
	0x6e, 0x01, 0xb6, 0x05, 0x1d, 0x25, 0x3c, 0x0c, 0xa2, 0xa9, 0xe8, 0x2e, 0xf5, 0xea, 0x1b, 0x9d,
	0xcd, 0x73, 0x03, 0x34, 0x34, 0xa0, 0x8d, 0xc1, 0x48, 0x2a, 0x02, 0x77, 0x89, 0xfe, 0x8f, 0x35,
	0x68, 0x15, 0x3b, 0x68, 0x62, 0x98, 0xef, 0x8a, 0xe3, 0x60, 0x1a, 0x49, 0xba, 0x88, 0xc7, 0x2d,
	0xc0, 0xae, 0xc2, 0xea, 0x97, 0x81, 0x94, 0x91, 0x28, 0x18, 0x4b, 0x74, 0xd5, 0x32, 0xc8, 0x7a,
	0xd0, 0x39, 0x48, 0x63, 0xc3, 0xa9, 0x13, 0xc7, 0x85, 0x58, 0x1f, 0x56, 0x46, 0x63, 0x91, 0x18,
	0x4a, 0x83, 0x28, 0x25, 0xac, 0xff, 0x62, 0x0d, 0xd6, 0xf7, 0x9e, 0x8f, 0x45, 0xb4, 0xf7, 0x7c,
	0x92, 0x66, 0xf2, 0x50, 0xe4, 0xe4, 0x80, 0x87, 0xc3, 0x07, 0x71, 0x30, 0x71, 0x1c, 0x60, 0x00,
	0xf6, 0x05, 0x74, 0x94, 0xe0, 0x3a, 0xe0, 0x92, 0x72, 0x40, 0x45, 0xd3, 0x60, 0x24, 0x15, 0x95,
	0xbb, 0x47, 0xd8, 0xe7, 0xa4, 0x3f, 0x97, 0xd9, 0x74, 0xac, 0xee, 0xdd, 0xd9, 0xbc, 0x72, 0xca,
	0x79, 0x45, 0xe4, 0xf6, 0x0c, 0xbb, 0x05, 0xcd, 0x87, 0xc3, 0x07, 0x51, 0x98, 0xe3, 0x37, 0xa1,
	0xf9, 0xcb, 0xa7, 0x1c, 0x47, 0x1a, 0x2f, 0xf8, 0xfe, 0x8b, 0x06, 0x86, 0x41, 0xdd, 0x86, 0xc2,
	0x90, 0x1c, 0xa7, 0xc3, 0x44, 0x5e, 0xdb, 0x34, 0x61, 0x28, 0x00, 0x67, 0x77, 0xeb, 0x3a, 0x85,
	0xa0, 0xce, 0x2d, 0x80, 0x99, 0x84, 0xc2, 0x48, 0x66, 0xda, 0xf5, 0x85, 0xc8, 0xde, 0x87, 0x35,
	0xa3, 0x64, 0x3b, 0xcb, 0x82, 0x19, 0x5d, 0xd2, 0xe3, 0x15, 0xd4, 0xe1, 0x6d, 0x5d, 0x57, 0x3c,
	0xaf, 0x57, 0xdf, 0xa8, 0xf3, 0x0a, 0xca, 0x36, 0x60, 0x5d, 0xab, 0x0e, 0x93, 0x13, 0x45, 0x5c,
	0xee, 0xd5, 0x37, 0xda, 0xbc, 0x0a, 0x63, 0xc0, 0x87, 0x52, 0xc4, 0x3b, 0x51, 0x28, 0x12, 0x39,
	0xdc, 0xed, 0x36, 0xe9, 0x93, 0x4a, 0x18, 0xfb, 0x00, 0x9a, 0x3b, 0x69, 0x92, 0x4f, 0x63, 0xd1,
	0x6d, 0x91, 0xeb, 0x57, 0x95, 0xef, 0xf4, 0x0b, 0xe1, 0xc5, 0x2e, 0xbb, 0x04, 0xb0, 0x17, 0x4f,
	0xe4, 0x4c, 0x79, 0xa7, 0x4d, 0xaa, 0x1c, 0xc4, 0xdd, 0xdf, 0xba, 0xde, 0x05, 0xf2, 0x8f, 0x83,
	0x30, 0x1f, 0x5a, 0x24, 0xa1, 0x87, 0x3a, 0xe4, 0x21, 0x23, 0xe3, 0x27, 0x59, 0x4d, 0xea, 0x93,
	0x56, 0xc8, 0x47, 0x55, 0xd8, 0x65, 0x16, 0x5e, 0x5a, 0x25, 0x2f, 0x55, 0x61, 0xf6, 0x21, 0x9c,
	0x29, 0xf4, 0x1b, 0x3f, 0xad, 0x91, 0x9f, 0xe6, 0x70, 0xff, 0x87, 0x06, 0x74, 0x9c, 0xdc, 0x7a,
	0x93, 0x08, 0xaf, 0x6b, 0x22, 0x7c, 0xdf, 0x80, 0xb6, 0xa9, 0x12, 0x6f, 0xd2, 0xe0, 0x35, 0x4d,
	0x83, 0xfe, 0xb7, 0xd0, 0x3e, 0x08, 0xe5, 0xde, 0xf1, 0xb1, 0x18, 0x4b, 0x76, 0x01, 0x96, 0x0f,
	0x42, 0x59, 0xf4, 0xbe, 0x36, 0xd7, 0x12, 0xfb, 0x04, 0x5a, 0x07, 0xa1, 0x74, 0xbb, 0xde, 0x79,
	0xe5, 0x2a, 0x73, 0x74, 0x30, 0x92, 0x07, 0xa1, 0xe4, 0x86, 0xe6, 0x5f, 0x04, 0x8f, 0x20, 0x76,
	0x06, 0xea, 0xfb, 0xd3, 0x44, 0xe7, 0x14, 0x2e, 0xfb, 0xbf, 0x9f, 0x87, 0x06, 0x06, 0x82, 0xc2,
	0x29, 0x45, 0x7c, 0x28, 0xe2, 0x49, 0x14, 0x48, 0x61, 0x7b, 0x6e, 0x15, 0x66, 0xfb, 0x70, 0xd6,
	0x85, 0xdc, 0x9b, 0x5c, 0x54, 0x37, 0xc1, 0xed, 0xc1, 0x48, 0xba, 0x2c, 0x3e, 0x7f, 0x06, 0xf3,
	0x62, 0x7f, 0x9a, 0x7c, 0x2d, 0x82, 0x49, 0x9a, 0xa0, 0xbd, 0x3a, 0xd9, 0x2b, 0x61, 0xec, 0x33,
	0x58, 0x33, 0xb2, 0xb2, 0xa4, 0x5a, 0xed, 0x85, 0x92, 0x25, 0x43, 0xe1, 0x15, 0x36, 0x0e, 0x31,
	0xdb, 0x71, 0x3c, 0x4d, 0x42, 0x19, 0x2a, 0x23, 0x1e, 0x19, 0x29, 0x83, 0x6c, 0x1b, 0xd6, 0x2d,
	0xa0, 0xcc, 0x2c, 0x93, 0x99, 0xb7, 0x4b, 0x66, 0x2c, 0x87, 0x57, 0xf9, 0x64, 0x48, 0xca, 0x60,
	0xfc, 0x24, 0x16, 0x09, 0x45, 0xad, 0xa9, 0x0d, 0xb9, 0x20, 0x19, 0x32, 0x80, 0x32, 0xd4, 0x5a,
	0x64, 0xc8, 0x70, 0x78, 0x95, 0x8f, 0x81, 0xba, 0x27, 0xa2, 0x48, 0x08, 0xeb, 0xb8, 0xb6, 0x0a,
	0x54, 0x05, 0xc6, 0x40, 0xb9, 0x90, 0x32, 0x07, 0x0b, 0x02, 0xe5, 0xb2, 0xf8, 0xfc, 0x19, 0x7c,
	0x33, 0xdb, 0x59, 0x9c, 0x66, 0x68, 0xab, 0x43, 0xb6, 0x8c, 0xcc, 0x36, 0x01, 0x68, 0xad, 0xb4,
	0xaf, 0x90, 0x76, 0x56, 0xfe, 0x18, 0xdc, 0xe6, 0x0e, 0x0b, 0x7d, 0xa5, 0x9e, 0x73, 0xf0, 0x28,
	0xa2, 0x4c, 0x5b, 0x55, 0xbe, 0x2a, 0x81, 0xe8, 0x2b, 0x0b, 0x28, 0xf5, 0x6b, 0x0b, 0x7c, 0x65,
	0x39, 0xbc, 0xca, 0xc7, 0x0c, 0x3b, 0x7c, 0x92, 0xa5, 0xdf, 0x15, 0x76, 0xd6, 0x55, 0x86, 0xb9,
	0x18, 0x66, 0x98, 0x91, 0x95, 0x95, 0x33, 0x0b, 0x32, 0xcc, 0x50, 0x78, 0x85, 0xed, 0xff, 0x54,
	0x83, 0xb5, 0x72, 0xae, 0x33, 0x06, 0x8d, 0xfb, 0x41, 0x2c, 0xf4, 0x6c, 0x4f, 0x6b, 0xc4, 0x76,
	0x45, 0x3e, 0xd6, 0x43, 0x34, 0xad, 0xb1, 0x58, 0xd3, 0x24, 0x3e, 0xdc, 0xa5, 0x62, 0xed, 0xf1,
	0x42, 0xc4, 0x2a, 0x36, 0x1c, 0xa7, 0xc9, 0xfd, 0x34, 0x8b, 0x83, 0x48, 0x4f, 0xcc, 0x0e, 0x42,
	0x4d, 0x60, 0x9c, 0x26, 0x77, 0x83, 0xec, 0x44, 0x74, 0x3d, 0xda, 0xb6, 0x00, 0xc6, 0x8b, 0xee,
	0x33, 0x9b, 0x60, 0x1e, 0xa3, 0x62, 0x23, 0xfb, 0xbf, 0x2c, 0xe1, 0xcc, 0x61, 0x5e, 0x09, 0xc6,
	0xc2, 0x08, 0x74, 0x40, 0x15, 0x87, 0x32, 0x88, 0xf6, 0x46, 0x4f, 0xd2, 0x54, 0xde, 0x4b, 0x1f,
	0xab, 0xb7, 0xee, 0x71, 0x0b, 0xe0, 0x6d, 0xed, 0x73, 0xd0, 0x9f, 0xe2, 0x20, 0x98, 0xb2, 0x36,
	0x8b, 0x51, 0x5f, 0xae, 0x7b, 0x4f, 0x15, 0x66, 0x37, 0xc0, 0xdb, 0x96, 0x32, 0xcb, 0xe9, 0x99,
	0x9a, 0x79, 0xbc, 0xfa, 0xca, 0x07, 0xc4, 0xd9, 0x4b, 0x64, 0x36, 0xe3, 0x8a, 0x4f, 0x29, 0x8a,
	0x0b, 0x8c, 0xf2, 0xb2, 0x4e, 0x51, 0x2d, 0xd3, 0xf5, 0x70, 0xad, 0xa2, 0xab, 0xde, 0xa5, 0x83,
	0xf8, 0x37, 0xf5, 0x3e, 0x29, 0xc4, 0x1a, 0xf9, 0x94, 0x8a, 0x1f, 0xd5, 0xc8, 0xa7, 0x62, 0xc6,
	0xce, 0x81, 0xf7, 0x4c, 0x17, 0x39, 0xc4, 0x94, 0x70, 0x7b, 0xe9, 0x66, 0xcd, 0xff, 0x06, 0x56,
	0xdc, 0xaa, 0x80, 0xbd, 0xd3, 0x4a, 0x8e, 0x37, 0x2b, 0x28, 0x39, 0xc4, 0x20, 0x23, 0x19, 0x8c,
	0x9f, 0x6a, 0xdd, 0x55, 0xd8, 0xff, 0xa3, 0x4e, 0x26, 0x8c, 0x9b, 0xc8, 0x44, 0xc9, 0x69, 0xc6,
	0x44, 0x09, 0xc5, 0x8f, 0x36, 0xfe, 0xca, 0x75, 0xc8, 0x1c, 0x44, 0x45, 0x74, 0x2a, 0x47, 0xe9,
	0x34, 0x79, 0xac, 0x43, 0x66, 0x01, 0x74, 0x27, 0x0a, 0x5f, 0x85, 0x99, 0xa0, 0xec, 0xf3, 0xb8,
	0x91, 0xd9, 0xcd, 0x72, 0x8c, 0xfa, 0x2f, 0xa9, 0x5c, 0xaf, 0x36, 0x48, 0xec, 0x53, 0x68, 0xec,
	0x44, 0xe1, 0x44, 0x97, 0xcb, 0x2b, 0x2f, 0x33, 0x8a, 0x1c, 0x65, 0x93, 0xe8, 0xf8, 0xc4, 0xf0,
	0xaf, 0xad, 0x92, 0x85, 0x88, 0x0e, 0xc0, 0xa5, 0xad, 0x8a, 0x1e, 0xb7, 0xc0, 0x7f, 0xc8, 0x89,
	0x1b, 0x4a, 0xef, 0xbf, 0x3f, 0xf8, 0x27, 0x15, 0x12, 0xb7, 0xfa, 0xe2, 0xf0, 0xe0, 0xca, 0x4e,
	0xb8, 0xe7, 0x70, 0x76, 0xbb, 0x08, 0x8b, 0x6a, 0xc5, 0x57, 0x5f, 0x5a, 0xe1, 0xff, 0x21, 0x30,
	0xf5, 0x53, 0x03, 0xd3, 0x78, 0x85, 0xaf, 0xe7, 0xb7, 0x1a, 0x34, 0x75, 0x7b, 0xa0, 0xb1, 0x8d,
	0x56, 0xce, 0x37, 0x3a, 0x08, 0xbb, 0x56, 0xfe, 0xba, 0x77, 0xe7, 0x3b, 0xcc, 0xff, 0xe6, 0xb3,
	0x7e, 0x5e, 0xc2, 0x27, 0x6b, 0x5b, 0x11, 0x3e, 0x59, 0x2b, 0xb9, 0x4f, 0xb6, 0x8c, 0x62, 0xae,
	0x1e, 0xe5, 0xe2, 0x30, 0x8c, 0x0b, 0xa5, 0x85, 0x88, 0x97, 0x3d, 0xca, 0xc5, 0xc1, 0xe4, 0x6e,
	0x18, 0x87, 0xb2, 0x28, 0xb0, 0x16, 0xd1, 0xfb, 0x5c, 0x8c, 0xd3, 0x67, 0x22, 0xd3, 0x0f, 0xd6,
	0x41, 0xd8, 0x47, 0x70, 0xd6, 0x4a, 0x47, 0x5a, 0x8d, 0x47, 0xb4, 0xf9, 0x0d, 0x74, 0xdb, 0x1d,
	0x21, 0x26, 0x74, 0x11, 0xdd, 0x3e, 0x0a, 0x99, 0x7d, 0x0c, 0x6f, 0xe1, 0x5a, 0x9f, 0x18, 0x26,
	0x52, 0x64, 0xcf, 0x82, 0x48, 0x8f, 0xf4, 0x8b, 0xb6, 0x58, 0x0f, 0x3a, 0x0e, 0x4c, 0xd3, 0xbd,
	0xc7, 0x5d, 0xc8, 0x3f, 0xc2, 0x8e, 0x64, 0xba, 0x2a, 0x76, 0x24, 0x23, 0xb8, 0x1d, 0xa9, 0x04,
	0xa2, 0x5a, 0x1e, 0x3c, 0x0e, 0xa7, 0xf9, 0x4e, 0x94, 0xe6, 0x85, 0xc3, 0x5c, 0xa8, 0xff, 0xeb,
	0x12, 0xb4, 0xee, 0x06, 0xc9, 0xc9, 0x34, 0x38, 0xa1, 0x06, 0xb6, 0x93, 0xc6, 0xb1, 0x9a, 0x97,
	0xd4, 0x40, 0x6d, 0x01, 0x76, 0x0b, 0x3a, 0x4a, 0x70, 0x87, 0x59, 0x3d, 0x66, 0x14, 0x2a, 0x68,
	0xd4, 0x40, 0x0e, 0x77, 0xb9, 0x6c, 0x13, 0x9a, 0xa3, 0x89, 0x18, 0x87, 0x41, 0x44, 0x29, 0xd6,
	0xd9, 0xec, 0xce, 0x1d, 0xd3, 0xfb, 0xbc, 0x20, 0xd2, 0x6f, 0x90, 0x2c, 0x53, 0xf3, 0x54, 0x83,
	0xee, 0x62, 0x64, 0xb6, 0x05, 0x40, 0x6b, 0x75, 0x13, 0xcf, 0x1d, 0x45, 0x1c, 0x95, 0x44, 0xe1,
	0x0e, 0xd3, 0xef, 0x41, 0xab, 0xb8, 0x20, 0xe6, 0xa6, 0x3a, 0xae, 0x06, 0x10, 0x25, 0xf8, 0x57,
	0xf0, 0x37, 0x66, 0x71, 0x85, 0xc5, 0x94, 0xcb, 0xf8, 0x20, 0x49, 0xe9, 0x62, 0xc2, 0xa3, 0x65,
	0xfa, 0x87, 0xe6, 0xb5, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x92, 0x5e, 0xd4, 0xe0, 0x14,
	0x00, 0x00,
}
