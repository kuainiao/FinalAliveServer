// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Config.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	Config.proto

It has these top-level messages:
	Grammar
	ExcelExportTest
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Grammar struct {
	Grammar string `protobuf:"bytes,1,opt,name=grammar" json:"grammar,omitempty"`
}

func (m *Grammar) Reset()                    { *m = Grammar{} }
func (m *Grammar) String() string            { return proto.CompactTextString(m) }
func (*Grammar) ProtoMessage()               {}
func (*Grammar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Grammar) GetGrammar() string {
	if m != nil {
		return m.Grammar
	}
	return ""
}

type ExcelExportTest struct {
	VIPmap    map[int32]*ExcelExportTest_StVIPmap `protobuf:"bytes,1,rep,name=VIPmap" json:"VIPmap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	VIPstruct *ExcelExportTest_StVIPstruct        `protobuf:"bytes,2,opt,name=VIPstruct" json:"VIPstruct,omitempty"`
	VIPlist   []*ExcelExportTest_StVIPlist        `protobuf:"bytes,3,rep,name=VIPlist" json:"VIPlist,omitempty"`
}

func (m *ExcelExportTest) Reset()                    { *m = ExcelExportTest{} }
func (m *ExcelExportTest) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest) ProtoMessage()               {}
func (*ExcelExportTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExcelExportTest) GetVIPmap() map[int32]*ExcelExportTest_StVIPmap {
	if m != nil {
		return m.VIPmap
	}
	return nil
}

func (m *ExcelExportTest) GetVIPstruct() *ExcelExportTest_StVIPstruct {
	if m != nil {
		return m.VIPstruct
	}
	return nil
}

func (m *ExcelExportTest) GetVIPlist() []*ExcelExportTest_StVIPlist {
	if m != nil {
		return m.VIPlist
	}
	return nil
}

type ExcelExportTest_StVIPmap struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Single  []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Single" json:"InfoInt32Single,omitempty"`
	InfoInt64Single  []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Single" json:"InfoInt64Single,omitempty"`
	InfoStrSingle    []string `protobuf:"bytes,6,rep,name=InfoStrSingle" json:"InfoStrSingle,omitempty"`
	InfoInt32Multi   []int32  `protobuf:"varint,7,rep,packed,name=InfoInt32Multi" json:"InfoInt32Multi,omitempty"`
	InfoInt64Multi   []int64  `protobuf:"varint,8,rep,packed,name=InfoInt64Multi" json:"InfoInt64Multi,omitempty"`
	InfoStrMulti     []string `protobuf:"bytes,9,rep,name=InfoStrMulti" json:"InfoStrMulti,omitempty"`
	ItemClientID     int32    `protobuf:"varint,10,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,11,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,12,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,13,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,14,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyIn32TSingle []int32  `protobuf:"varint,15,rep,packed,name=EmptyIn32tSingle" json:"EmptyIn32tSingle,omitempty"`
	EmptyInt64Single []int64  `protobuf:"varint,16,rep,packed,name=EmptyInt64Single" json:"EmptyInt64Single,omitempty"`
	EmptyStrSingle   []string `protobuf:"bytes,17,rep,name=EmptyStrSingle" json:"EmptyStrSingle,omitempty"`
	EmptyInt32Multi  []int32  `protobuf:"varint,18,rep,packed,name=EmptyInt32Multi" json:"EmptyInt32Multi,omitempty"`
	EmptyInt64Multi  []int64  `protobuf:"varint,19,rep,packed,name=EmptyInt64Multi" json:"EmptyInt64Multi,omitempty"`
	EmptyStrMulti    []string `protobuf:"bytes,20,rep,name=EmptyStrMulti" json:"EmptyStrMulti,omitempty"`
}

func (m *ExcelExportTest_StVIPmap) Reset()                    { *m = ExcelExportTest_StVIPmap{} }
func (m *ExcelExportTest_StVIPmap) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPmap) ProtoMessage()               {}
func (*ExcelExportTest_StVIPmap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *ExcelExportTest_StVIPmap) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt32Single() []int32 {
	if m != nil {
		return m.InfoInt32Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64Single() []int64 {
	if m != nil {
		return m.InfoInt64Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoStrSingle() []string {
	if m != nil {
		return m.InfoStrSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt32Multi() []int32 {
	if m != nil {
		return m.InfoInt32Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64Multi() []int64 {
	if m != nil {
		return m.InfoInt64Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoStrMulti() []string {
	if m != nil {
		return m.InfoStrMulti
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetEmptyIn32TSingle() []int32 {
	if m != nil {
		return m.EmptyIn32TSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64Single() []int64 {
	if m != nil {
		return m.EmptyInt64Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStrSingle() []string {
	if m != nil {
		return m.EmptyStrSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32Multi() []int32 {
	if m != nil {
		return m.EmptyInt32Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64Multi() []int64 {
	if m != nil {
		return m.EmptyInt64Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStrMulti() []string {
	if m != nil {
		return m.EmptyStrMulti
	}
	return nil
}

type ExcelExportTest_StVIPstruct struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Single  []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Single" json:"InfoInt32Single,omitempty"`
	InfoInt64Single  []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Single" json:"InfoInt64Single,omitempty"`
	InfoStrSingle    []string `protobuf:"bytes,6,rep,name=InfoStrSingle" json:"InfoStrSingle,omitempty"`
	InfoInt32Multi   []int32  `protobuf:"varint,7,rep,packed,name=InfoInt32Multi" json:"InfoInt32Multi,omitempty"`
	InfoInt64Multi   []int64  `protobuf:"varint,8,rep,packed,name=InfoInt64Multi" json:"InfoInt64Multi,omitempty"`
	InfoStrMulti     []string `protobuf:"bytes,9,rep,name=InfoStrMulti" json:"InfoStrMulti,omitempty"`
	ItemClientID     int32    `protobuf:"varint,10,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,11,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,12,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,13,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,14,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyIn32TSingle []int32  `protobuf:"varint,15,rep,packed,name=EmptyIn32tSingle" json:"EmptyIn32tSingle,omitempty"`
	EmptyInt64Single []int64  `protobuf:"varint,16,rep,packed,name=EmptyInt64Single" json:"EmptyInt64Single,omitempty"`
	EmptyStrSingle   []string `protobuf:"bytes,17,rep,name=EmptyStrSingle" json:"EmptyStrSingle,omitempty"`
	EmptyInt32Multi  []int32  `protobuf:"varint,18,rep,packed,name=EmptyInt32Multi" json:"EmptyInt32Multi,omitempty"`
	EmptyInt64Multi  []int64  `protobuf:"varint,19,rep,packed,name=EmptyInt64Multi" json:"EmptyInt64Multi,omitempty"`
	EmptyStrMulti    []string `protobuf:"bytes,20,rep,name=EmptyStrMulti" json:"EmptyStrMulti,omitempty"`
}

func (m *ExcelExportTest_StVIPstruct) Reset()                    { *m = ExcelExportTest_StVIPstruct{} }
func (m *ExcelExportTest_StVIPstruct) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPstruct) ProtoMessage()               {}
func (*ExcelExportTest_StVIPstruct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32Single() []int32 {
	if m != nil {
		return m.InfoInt32Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64Single() []int64 {
	if m != nil {
		return m.InfoInt64Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStrSingle() []string {
	if m != nil {
		return m.InfoStrSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32Multi() []int32 {
	if m != nil {
		return m.InfoInt32Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64Multi() []int64 {
	if m != nil {
		return m.InfoInt64Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStrMulti() []string {
	if m != nil {
		return m.InfoStrMulti
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyIn32TSingle() []int32 {
	if m != nil {
		return m.EmptyIn32TSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64Single() []int64 {
	if m != nil {
		return m.EmptyInt64Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStrSingle() []string {
	if m != nil {
		return m.EmptyStrSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32Multi() []int32 {
	if m != nil {
		return m.EmptyInt32Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64Multi() []int64 {
	if m != nil {
		return m.EmptyInt64Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStrMulti() []string {
	if m != nil {
		return m.EmptyStrMulti
	}
	return nil
}

type ExcelExportTest_StVIPlist struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Single  []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Single" json:"InfoInt32Single,omitempty"`
	InfoInt64Single  []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Single" json:"InfoInt64Single,omitempty"`
	InfoStrSingle    []string `protobuf:"bytes,6,rep,name=InfoStrSingle" json:"InfoStrSingle,omitempty"`
	InfoInt32Multi   []int32  `protobuf:"varint,7,rep,packed,name=InfoInt32Multi" json:"InfoInt32Multi,omitempty"`
	InfoInt64Multi   []int64  `protobuf:"varint,8,rep,packed,name=InfoInt64Multi" json:"InfoInt64Multi,omitempty"`
	InfoStrMulti     []string `protobuf:"bytes,9,rep,name=InfoStrMulti" json:"InfoStrMulti,omitempty"`
	ItemClientID     int32    `protobuf:"varint,10,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,11,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,12,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,13,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,14,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyIn32TSingle []int32  `protobuf:"varint,15,rep,packed,name=EmptyIn32tSingle" json:"EmptyIn32tSingle,omitempty"`
	EmptyInt64Single []int64  `protobuf:"varint,16,rep,packed,name=EmptyInt64Single" json:"EmptyInt64Single,omitempty"`
	EmptyStrSingle   []string `protobuf:"bytes,17,rep,name=EmptyStrSingle" json:"EmptyStrSingle,omitempty"`
	EmptyInt32Multi  []int32  `protobuf:"varint,18,rep,packed,name=EmptyInt32Multi" json:"EmptyInt32Multi,omitempty"`
	EmptyInt64Multi  []int64  `protobuf:"varint,19,rep,packed,name=EmptyInt64Multi" json:"EmptyInt64Multi,omitempty"`
	EmptyStrMulti    []string `protobuf:"bytes,20,rep,name=EmptyStrMulti" json:"EmptyStrMulti,omitempty"`
}

func (m *ExcelExportTest_StVIPlist) Reset()                    { *m = ExcelExportTest_StVIPlist{} }
func (m *ExcelExportTest_StVIPlist) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPlist) ProtoMessage()               {}
func (*ExcelExportTest_StVIPlist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *ExcelExportTest_StVIPlist) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt32Single() []int32 {
	if m != nil {
		return m.InfoInt32Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64Single() []int64 {
	if m != nil {
		return m.InfoInt64Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoStrSingle() []string {
	if m != nil {
		return m.InfoStrSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt32Multi() []int32 {
	if m != nil {
		return m.InfoInt32Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64Multi() []int64 {
	if m != nil {
		return m.InfoInt64Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoStrMulti() []string {
	if m != nil {
		return m.InfoStrMulti
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetEmptyIn32TSingle() []int32 {
	if m != nil {
		return m.EmptyIn32TSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64Single() []int64 {
	if m != nil {
		return m.EmptyInt64Single
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStrSingle() []string {
	if m != nil {
		return m.EmptyStrSingle
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32Multi() []int32 {
	if m != nil {
		return m.EmptyInt32Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64Multi() []int64 {
	if m != nil {
		return m.EmptyInt64Multi
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStrMulti() []string {
	if m != nil {
		return m.EmptyStrMulti
	}
	return nil
}

func init() {
	proto.RegisterType((*Grammar)(nil), "main.Grammar")
	proto.RegisterType((*ExcelExportTest)(nil), "main.ExcelExportTest")
	proto.RegisterType((*ExcelExportTest_StVIPmap)(nil), "main.ExcelExportTest.StVIPmap")
	proto.RegisterType((*ExcelExportTest_StVIPstruct)(nil), "main.ExcelExportTest.StVIPstruct")
	proto.RegisterType((*ExcelExportTest_StVIPlist)(nil), "main.ExcelExportTest.StVIPlist")
}

func init() { proto.RegisterFile("Config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0xc3, 0x76, 0x4b, 0xe9, 0x0b, 0x2c, 0x38, 0xee, 0x61, 0x42, 0xcc, 0x5a, 0xd1, 0x68,
	0xe3, 0x81, 0x03, 0x34, 0xc4, 0xf5, 0xe2, 0x01, 0x89, 0xe9, 0xc1, 0x84, 0x0c, 0x86, 0xc4, 0x63,
	0xdd, 0x74, 0x49, 0x63, 0xff, 0xa5, 0x0c, 0x66, 0x39, 0xfb, 0x89, 0x35, 0x7e, 0x00, 0x33, 0xef,
	0x4c, 0xdb, 0xa1, 0x9b, 0xdd, 0x2f, 0xb0, 0xdc, 0xfa, 0x3e, 0xf3, 0x9b, 0x79, 0xdb, 0xf7, 0x79,
	0x08, 0x03, 0xbd, 0x45, 0x96, 0xde, 0x46, 0xdb, 0x49, 0x5e, 0x64, 0x3c, 0x23, 0xe7, 0x49, 0x10,
	0xa5, 0xe3, 0xd7, 0x60, 0x7d, 0x29, 0x82, 0x24, 0x09, 0x0a, 0x42, 0xc1, 0xda, 0xca, 0x47, 0xda,
	0x72, 0x5a, 0xae, 0xcd, 0xca, 0x72, 0xfc, 0xfb, 0x12, 0x06, 0xcb, 0xbb, 0x9b, 0x30, 0x5e, 0xde,
	0xe5, 0x59, 0xc1, 0xbf, 0x85, 0x3b, 0x4e, 0xae, 0xa1, 0xbd, 0xf1, 0x57, 0x49, 0x90, 0xd3, 0x96,
	0x63, 0xb8, 0xdd, 0xe9, 0xab, 0x89, 0x38, 0x6f, 0xd2, 0xc0, 0x26, 0x92, 0x59, 0xa6, 0xbc, 0x38,
	0x30, 0xb5, 0x81, 0x7c, 0x02, 0x7b, 0xe3, 0xaf, 0x76, 0xbc, 0xd8, 0xdf, 0x70, 0x7a, 0xe6, 0xb4,
	0x1e, 0xde, 0xbd, 0xe6, 0x15, 0xc8, 0xea, 0x3d, 0xe4, 0x1a, 0xac, 0x8d, 0xbf, 0x8a, 0xa3, 0x1d,
	0xa7, 0x06, 0x36, 0x7f, 0xf9, 0xc8, 0x76, 0x81, 0xb1, 0x92, 0x1f, 0xfd, 0x31, 0xa1, 0x83, 0xb2,
	0x78, 0x91, 0x17, 0x60, 0xfb, 0xe9, 0x6d, 0xe6, 0xa7, 0x7c, 0x36, 0xc5, 0x6f, 0x36, 0x59, 0x2d,
	0x68, 0xab, 0x73, 0x0f, 0x5f, 0xd3, 0x60, 0xb5, 0x20, 0xa6, 0x25, 0x8a, 0x35, 0x2f, 0xa8, 0x21,
	0xa7, 0xa5, 0x4a, 0xe2, 0xc2, 0xa0, 0x3a, 0x64, 0x1d, 0xa5, 0xdb, 0x38, 0xa4, 0xe7, 0x8e, 0xe1,
	0x9a, 0xac, 0x29, 0x6b, 0xe4, 0xdc, 0x53, 0xa4, 0xe9, 0x18, 0xae, 0xc1, 0x9a, 0x32, 0x79, 0x03,
	0x7d, 0x75, 0xbc, 0xe2, 0xda, 0x8e, 0xe1, 0xda, 0xec, 0x58, 0x24, 0x6f, 0xe1, 0xa2, 0x6a, 0xf1,
	0x75, 0x1f, 0xf3, 0x88, 0x5a, 0xd8, 0xb8, 0xa1, 0x6a, 0xdc, 0xdc, 0x93, 0x5c, 0x07, 0xdb, 0x36,
	0x54, 0x32, 0x86, 0x9e, 0x6a, 0x20, 0x29, 0x1b, 0x9b, 0x1e, 0x69, 0xc8, 0xf0, 0x30, 0x59, 0xc4,
	0x51, 0x98, 0x72, 0xff, 0x33, 0x05, 0x1c, 0xe3, 0x91, 0x46, 0xde, 0x81, 0xb5, 0xc8, 0xd2, 0xdd,
	0x3e, 0x09, 0x69, 0x17, 0xed, 0xee, 0x4b, 0xbf, 0x54, 0xf2, 0x58, 0xb9, 0x4a, 0xae, 0x00, 0x96,
	0x49, 0xce, 0x0f, 0xd2, 0x91, 0x1e, 0x1e, 0xa5, 0x29, 0xfa, 0xfa, 0xdc, 0xa3, 0x7d, 0xf4, 0x44,
	0x53, 0xc8, 0x08, 0x3a, 0x58, 0x09, 0x57, 0x2e, 0xd0, 0x95, 0xaa, 0x26, 0xef, 0x61, 0xa8, 0xc8,
	0xd9, 0x94, 0xab, 0x29, 0x0e, 0x70, 0x3c, 0xf7, 0x74, 0x8d, 0xad, 0x9d, 0x19, 0xe2, 0x88, 0xee,
	0xe9, 0x62, 0x98, 0x65, 0x0f, 0x45, 0x3e, 0xc3, 0x31, 0x35, 0x54, 0x61, 0x76, 0xfd, 0x25, 0x72,
	0x9e, 0x44, 0xc6, 0xa2, 0x21, 0xeb, 0x64, 0xe9, 0xcf, 0x73, 0x19, 0x8b, 0x86, 0x2c, 0x62, 0x51,
	0x76, 0x91, 0xdc, 0xa5, 0x8c, 0xc5, 0x91, 0x38, 0xfa, 0x67, 0x42, 0x57, 0xfb, 0x25, 0x9d, 0x62,
	0x7f, 0x8a, 0xfd, 0x53, 0x88, 0xfd, 0x5f, 0x13, 0xec, 0xea, 0x1f, 0xe0, 0x14, 0xfa, 0x53, 0xe8,
	0x9f, 0x42, 0xe8, 0xbf, 0x43, 0x57, 0xbb, 0x72, 0x91, 0x21, 0x18, 0x3f, 0xc3, 0x83, 0xca, 0xbb,
	0x78, 0x24, 0x1e, 0x98, 0xbf, 0x82, 0x78, 0x1f, 0xaa, 0x8b, 0xd7, 0xd5, 0x23, 0x37, 0xa7, 0x24,
	0xc8, 0x99, 0x84, 0x3f, 0x9e, 0x7d, 0x68, 0xfd, 0x68, 0xe3, 0xbd, 0x71, 0xf6, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x42, 0x72, 0x9f, 0x02, 0x47, 0x0a, 0x00, 0x00,
}
