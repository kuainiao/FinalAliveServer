// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Config.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	Config.proto

It has these top-level messages:
	Grammar
	ExcelExportTest
	Item
	Language
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Grammar struct {
	Grammar string `protobuf:"bytes,1,opt,name=grammar" json:"grammar,omitempty"`
}

func (m *Grammar) Reset()                    { *m = Grammar{} }
func (m *Grammar) String() string            { return proto.CompactTextString(m) }
func (*Grammar) ProtoMessage()               {}
func (*Grammar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Grammar) GetGrammar() string {
	if m != nil {
		return m.Grammar
	}
	return ""
}

type ExcelExportTest struct {
	VIPmapKey   []int32                      `protobuf:"varint,1,rep,packed,name=VIPmapKey" json:"VIPmapKey,omitempty"`
	VIPmapValue []*ExcelExportTest_StVIPmap  `protobuf:"bytes,2,rep,name=VIPmapValue" json:"VIPmapValue,omitempty"`
	VIPstruct   *ExcelExportTest_StVIPstruct `protobuf:"bytes,3,opt,name=VIPstruct" json:"VIPstruct,omitempty"`
	VIPlist     []*ExcelExportTest_StVIPlist `protobuf:"bytes,4,rep,name=VIPlist" json:"VIPlist,omitempty"`
}

func (m *ExcelExportTest) Reset()                    { *m = ExcelExportTest{} }
func (m *ExcelExportTest) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest) ProtoMessage()               {}
func (*ExcelExportTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExcelExportTest) GetVIPmapKey() []int32 {
	if m != nil {
		return m.VIPmapKey
	}
	return nil
}

func (m *ExcelExportTest) GetVIPmapValue() []*ExcelExportTest_StVIPmap {
	if m != nil {
		return m.VIPmapValue
	}
	return nil
}

func (m *ExcelExportTest) GetVIPstruct() *ExcelExportTest_StVIPstruct {
	if m != nil {
		return m.VIPstruct
	}
	return nil
}

func (m *ExcelExportTest) GetVIPlist() []*ExcelExportTest_StVIPlist {
	if m != nil {
		return m.VIPlist
	}
	return nil
}

type ExcelExportTest_StVIPmap struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPmap) Reset()                    { *m = ExcelExportTest_StVIPmap{} }
func (m *ExcelExportTest_StVIPmap) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPmap) ProtoMessage()               {}
func (*ExcelExportTest_StVIPmap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *ExcelExportTest_StVIPmap) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPmap) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type ExcelExportTest_StVIPstruct struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPstruct) Reset()                    { *m = ExcelExportTest_StVIPstruct{} }
func (m *ExcelExportTest_StVIPstruct) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPstruct) ProtoMessage()               {}
func (*ExcelExportTest_StVIPstruct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPstruct) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type ExcelExportTest_StVIPlist struct {
	InfoInt32        int32    `protobuf:"varint,1,opt,name=InfoInt32" json:"InfoInt32,omitempty"`
	InfoInt64        int64    `protobuf:"varint,2,opt,name=InfoInt64" json:"InfoInt64,omitempty"`
	InfoStr          string   `protobuf:"bytes,3,opt,name=InfoStr" json:"InfoStr,omitempty"`
	InfoInt32Array   []int32  `protobuf:"varint,4,rep,packed,name=InfoInt32Array" json:"InfoInt32Array,omitempty"`
	InfoInt64Array   []int64  `protobuf:"varint,5,rep,packed,name=InfoInt64Array" json:"InfoInt64Array,omitempty"`
	InfoStringArray  []string `protobuf:"bytes,6,rep,name=InfoStringArray" json:"InfoStringArray,omitempty"`
	ItemClientID     int32    `protobuf:"varint,7,opt,name=ItemClientID" json:"ItemClientID,omitempty"`
	Consume          *Grammar `protobuf:"bytes,8,opt,name=Consume" json:"Consume,omitempty"`
	EmptyInt32       int32    `protobuf:"varint,9,opt,name=EmptyInt32" json:"EmptyInt32,omitempty"`
	EmptyInt64       int64    `protobuf:"varint,10,opt,name=EmptyInt64" json:"EmptyInt64,omitempty"`
	EmptyStr         string   `protobuf:"bytes,11,opt,name=EmptyStr" json:"EmptyStr,omitempty"`
	EmptyInt32Array  []int32  `protobuf:"varint,12,rep,packed,name=EmptyInt32Array" json:"EmptyInt32Array,omitempty"`
	EmptyInt64Array  []int64  `protobuf:"varint,13,rep,packed,name=EmptyInt64Array" json:"EmptyInt64Array,omitempty"`
	EmptyStringArray []string `protobuf:"bytes,14,rep,name=EmptyStringArray" json:"EmptyStringArray,omitempty"`
}

func (m *ExcelExportTest_StVIPlist) Reset()                    { *m = ExcelExportTest_StVIPlist{} }
func (m *ExcelExportTest_StVIPlist) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPlist) ProtoMessage()               {}
func (*ExcelExportTest_StVIPlist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *ExcelExportTest_StVIPlist) GetInfoInt32() int32 {
	if m != nil {
		return m.InfoInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64() int64 {
	if m != nil {
		return m.InfoInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt32Array() []int32 {
	if m != nil {
		return m.InfoInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoInt64Array() []int64 {
	if m != nil {
		return m.InfoInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetInfoStringArray() []string {
	if m != nil {
		return m.InfoStringArray
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetItemClientID() int32 {
	if m != nil {
		return m.ItemClientID
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetConsume() *Grammar {
	if m != nil {
		return m.Consume
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32() int32 {
	if m != nil {
		return m.EmptyInt32
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64() int64 {
	if m != nil {
		return m.EmptyInt64
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStr() string {
	if m != nil {
		return m.EmptyStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt32Array() []int32 {
	if m != nil {
		return m.EmptyInt32Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyInt64Array() []int64 {
	if m != nil {
		return m.EmptyInt64Array
	}
	return nil
}

func (m *ExcelExportTest_StVIPlist) GetEmptyStringArray() []string {
	if m != nil {
		return m.EmptyStringArray
	}
	return nil
}

type Item struct {
	ItemTemplateKey   []int32                `protobuf:"varint,1,rep,packed,name=ItemTemplateKey" json:"ItemTemplateKey,omitempty"`
	ItemTemplateValue []*Item_StItemTemplate `protobuf:"bytes,2,rep,name=ItemTemplateValue" json:"ItemTemplateValue,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Item) GetItemTemplateKey() []int32 {
	if m != nil {
		return m.ItemTemplateKey
	}
	return nil
}

func (m *Item) GetItemTemplateValue() []*Item_StItemTemplate {
	if m != nil {
		return m.ItemTemplateValue
	}
	return nil
}

type Item_StItemTemplate struct {
	Name     string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Desc     string  `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
	SceneKey string  `protobuf:"bytes,3,opt,name=SceneKey" json:"SceneKey,omitempty"`
	Icon     string  `protobuf:"bytes,4,opt,name=Icon" json:"Icon,omitempty"`
	ItemType int32   `protobuf:"varint,5,opt,name=ItemType" json:"ItemType,omitempty"`
	SubType  []int32 `protobuf:"varint,6,rep,packed,name=SubType" json:"SubType,omitempty"`
}

func (m *Item_StItemTemplate) Reset()                    { *m = Item_StItemTemplate{} }
func (m *Item_StItemTemplate) String() string            { return proto.CompactTextString(m) }
func (*Item_StItemTemplate) ProtoMessage()               {}
func (*Item_StItemTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Item_StItemTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item_StItemTemplate) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Item_StItemTemplate) GetSceneKey() string {
	if m != nil {
		return m.SceneKey
	}
	return ""
}

func (m *Item_StItemTemplate) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Item_StItemTemplate) GetItemType() int32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *Item_StItemTemplate) GetSubType() []int32 {
	if m != nil {
		return m.SubType
	}
	return nil
}

type Language struct {
	CommonKey   []string              `protobuf:"bytes,1,rep,name=CommonKey" json:"CommonKey,omitempty"`
	CommonValue []*Language_StCommon  `protobuf:"bytes,2,rep,name=CommonValue" json:"CommonValue,omitempty"`
	Special     []*Language_StSpecial `protobuf:"bytes,3,rep,name=Special" json:"Special,omitempty"`
	ErrorKey    []string              `protobuf:"bytes,4,rep,name=ErrorKey" json:"ErrorKey,omitempty"`
	ErrorValue  []*Language_StError   `protobuf:"bytes,5,rep,name=ErrorValue" json:"ErrorValue,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Language) GetCommonKey() []string {
	if m != nil {
		return m.CommonKey
	}
	return nil
}

func (m *Language) GetCommonValue() []*Language_StCommon {
	if m != nil {
		return m.CommonValue
	}
	return nil
}

func (m *Language) GetSpecial() []*Language_StSpecial {
	if m != nil {
		return m.Special
	}
	return nil
}

func (m *Language) GetErrorKey() []string {
	if m != nil {
		return m.ErrorKey
	}
	return nil
}

func (m *Language) GetErrorValue() []*Language_StError {
	if m != nil {
		return m.ErrorValue
	}
	return nil
}

type Language_StCommon struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StCommon) Reset()                    { *m = Language_StCommon{} }
func (m *Language_StCommon) String() string            { return proto.CompactTextString(m) }
func (*Language_StCommon) ProtoMessage()               {}
func (*Language_StCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *Language_StCommon) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Language_StSpecial struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StSpecial) Reset()                    { *m = Language_StSpecial{} }
func (m *Language_StSpecial) String() string            { return proto.CompactTextString(m) }
func (*Language_StSpecial) ProtoMessage()               {}
func (*Language_StSpecial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *Language_StSpecial) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Language_StError struct {
	Value string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Language_StError) Reset()                    { *m = Language_StError{} }
func (m *Language_StError) String() string            { return proto.CompactTextString(m) }
func (*Language_StError) ProtoMessage()               {}
func (*Language_StError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 2} }

func (m *Language_StError) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Grammar)(nil), "main.Grammar")
	proto.RegisterType((*ExcelExportTest)(nil), "main.ExcelExportTest")
	proto.RegisterType((*ExcelExportTest_StVIPmap)(nil), "main.ExcelExportTest.StVIPmap")
	proto.RegisterType((*ExcelExportTest_StVIPstruct)(nil), "main.ExcelExportTest.StVIPstruct")
	proto.RegisterType((*ExcelExportTest_StVIPlist)(nil), "main.ExcelExportTest.StVIPlist")
	proto.RegisterType((*Item)(nil), "main.Item")
	proto.RegisterType((*Item_StItemTemplate)(nil), "main.Item.StItemTemplate")
	proto.RegisterType((*Language)(nil), "main.Language")
	proto.RegisterType((*Language_StCommon)(nil), "main.Language.StCommon")
	proto.RegisterType((*Language_StSpecial)(nil), "main.Language.StSpecial")
	proto.RegisterType((*Language_StError)(nil), "main.Language.StError")
}

func init() { proto.RegisterFile("Config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xc1, 0x6a, 0xdb, 0x4c,
	0x10, 0xc6, 0x96, 0x14, 0x59, 0xe3, 0xc4, 0xf9, 0xff, 0xa5, 0xb4, 0x5b, 0x53, 0x12, 0xc5, 0x85,
	0x56, 0xf4, 0xe0, 0x83, 0x13, 0x0c, 0x39, 0xb5, 0xc5, 0x09, 0x41, 0xb4, 0x94, 0xb0, 0x0a, 0xb9,
	0x2b, 0x66, 0x63, 0x0c, 0x5e, 0x49, 0xc8, 0x6b, 0x88, 0xcf, 0x29, 0x7d, 0x88, 0x1e, 0xfa, 0x4e,
	0x7d, 0xa3, 0xb2, 0xb3, 0x5e, 0x69, 0x23, 0x87, 0xbc, 0x40, 0x72, 0xdb, 0xef, 0x9b, 0x6f, 0x46,
	0x33, 0x9f, 0xc7, 0x5a, 0xc1, 0xee, 0x24, 0xcf, 0x6e, 0xe7, 0xb3, 0x61, 0x51, 0xe6, 0x32, 0x27,
	0xae, 0x48, 0xe7, 0xd9, 0xe0, 0x3d, 0xf8, 0x17, 0x65, 0x2a, 0x44, 0x5a, 0x12, 0x0a, 0xfe, 0x4c,
	0x1f, 0x69, 0x2b, 0x6c, 0x45, 0x01, 0x33, 0x70, 0x70, 0xdf, 0x83, 0xfd, 0xf3, 0xbb, 0x29, 0x5f,
	0x9c, 0xdf, 0x15, 0x79, 0x29, 0xaf, 0xf8, 0x52, 0x92, 0x77, 0x10, 0x5c, 0xc7, 0x97, 0x22, 0x2d,
	0xbe, 0xf1, 0x35, 0x6d, 0x85, 0x4e, 0xe4, 0xb1, 0x9a, 0x20, 0x5f, 0xa0, 0xab, 0xc1, 0x75, 0xba,
	0x58, 0x71, 0xda, 0x0e, 0x9d, 0xa8, 0x3b, 0x3a, 0x18, 0xaa, 0x47, 0x0e, 0x1b, 0x95, 0x86, 0x89,
	0xd4, 0x52, 0x66, 0xa7, 0x90, 0xcf, 0x58, 0x7f, 0x29, 0xcb, 0xd5, 0x54, 0x52, 0x27, 0x6c, 0x45,
	0xdd, 0xd1, 0xd1, 0x13, 0xf9, 0x5a, 0xc8, 0xea, 0x1c, 0x72, 0x0a, 0xfe, 0x75, 0x7c, 0xb9, 0x98,
	0x2f, 0x25, 0x75, 0xf1, 0xf1, 0x87, 0x4f, 0xa4, 0x2b, 0x19, 0x33, 0xfa, 0xfe, 0xbd, 0x0b, 0x1d,
	0xd3, 0x95, 0x1a, 0x34, 0xce, 0x6e, 0xf3, 0x38, 0x93, 0xc7, 0x23, 0x34, 0xc6, 0x63, 0x35, 0x61,
	0x45, 0xc7, 0x27, 0xb4, 0x1d, 0xb6, 0x22, 0x87, 0xd5, 0x84, 0xb2, 0x54, 0x81, 0x44, 0x96, 0x38,
	0x42, 0xc0, 0x0c, 0x24, 0x1f, 0xa0, 0x57, 0x15, 0xf9, 0x5a, 0x96, 0xe9, 0x1a, 0x9b, 0xf4, 0x58,
	0x83, 0xb5, 0x74, 0xe3, 0x13, 0xad, 0xf3, 0x42, 0x27, 0x72, 0x58, 0x83, 0x25, 0x11, 0xec, 0x6f,
	0x4a, 0xcf, 0xb3, 0x99, 0x16, 0xee, 0x84, 0x4e, 0x14, 0xb0, 0x26, 0x4d, 0x06, 0xb0, 0x1b, 0x4b,
	0x2e, 0x26, 0x8b, 0x39, 0xcf, 0x64, 0x7c, 0x46, 0x7d, 0x1c, 0xe9, 0x01, 0x47, 0x3e, 0x82, 0x3f,
	0xc9, 0xb3, 0xe5, 0x4a, 0x70, 0xda, 0x41, 0xeb, 0xf7, 0xb4, 0x77, 0x9b, 0x55, 0x61, 0x26, 0x4a,
	0x0e, 0x00, 0xce, 0x45, 0x21, 0xd7, 0xda, 0x9d, 0x00, 0x4b, 0x59, 0x8c, 0x1d, 0x1f, 0x9f, 0x50,
	0x40, 0x7f, 0x2c, 0x86, 0xf4, 0xa1, 0x83, 0x48, 0x39, 0xd4, 0x45, 0x87, 0x2a, 0xac, 0x46, 0xaa,
	0x2b, 0xe9, 0x91, 0x76, 0xd1, 0xa3, 0x26, 0x6d, 0x2b, 0x8d, 0x4b, 0x7b, 0xe8, 0x52, 0x93, 0x26,
	0x9f, 0xe0, 0x3f, 0x53, 0xbf, 0xf2, 0xa9, 0x87, 0x3e, 0x6d, 0xf1, 0xfd, 0x5f, 0x2e, 0x74, 0xad,
	0xdd, 0x7a, 0x59, 0x84, 0xe7, 0xba, 0x08, 0x3f, 0x5d, 0x08, 0xaa, 0xb7, 0xc4, 0xcb, 0x1a, 0x3c,
	0xd3, 0x35, 0x18, 0xfc, 0x6e, 0x83, 0xab, 0x5c, 0x41, 0x6f, 0x25, 0x17, 0x57, 0x5c, 0x14, 0x8b,
	0x54, 0xf2, 0xfa, 0x02, 0x6c, 0xd2, 0xe4, 0x02, 0xfe, 0xb7, 0x29, 0xfb, 0x32, 0x7c, 0xab, 0x1d,
	0x54, 0xe1, 0x61, 0x22, 0x6d, 0x15, 0xdb, 0xce, 0xe9, 0xff, 0x69, 0x41, 0xef, 0xa1, 0x8a, 0x10,
	0x70, 0x7f, 0xa4, 0x82, 0x6f, 0xee, 0x6a, 0x3c, 0x2b, 0xee, 0x8c, 0x2f, 0xa7, 0xb8, 0x78, 0x01,
	0xc3, 0xb3, 0xb2, 0x34, 0x99, 0xf2, 0x0c, 0xdb, 0xd4, 0x4b, 0x57, 0x61, 0xa5, 0x8f, 0xa7, 0x79,
	0x46, 0x5d, 0xad, 0x57, 0x67, 0xa5, 0xc7, 0xe7, 0xac, 0x0b, 0x4e, 0x3d, 0xfc, 0x01, 0x2b, 0xac,
	0xf6, 0x37, 0x59, 0xdd, 0x60, 0x68, 0x07, 0x27, 0x36, 0x70, 0xf0, 0xb7, 0x0d, 0x9d, 0xef, 0x69,
	0x36, 0x5b, 0xa5, 0x33, 0xae, 0xfe, 0x04, 0x93, 0x5c, 0x88, 0x3c, 0x33, 0xd6, 0x04, 0xac, 0x26,
	0xc8, 0x29, 0x74, 0x35, 0xb0, 0xed, 0x78, 0xa3, 0xed, 0x30, 0x25, 0x86, 0x89, 0xd4, 0x1a, 0x66,
	0x6b, 0xc9, 0x08, 0xfc, 0xa4, 0xe0, 0xd3, 0x79, 0xba, 0xa0, 0x0e, 0xa6, 0xd1, 0xad, 0xb4, 0x4d,
	0x9c, 0x19, 0x21, 0xae, 0x54, 0x59, 0xe6, 0xa5, 0xea, 0xc5, 0xc5, 0x5e, 0x2a, 0x4c, 0xc6, 0x00,
	0x78, 0xd6, 0x9d, 0x78, 0x58, 0xf2, 0xf5, 0x56, 0x49, 0x94, 0x30, 0x4b, 0xd9, 0x0f, 0xd5, 0xf7,
	0x81, 0x6e, 0x8c, 0xbc, 0x02, 0x4f, 0xa7, 0xeb, 0x1f, 0x42, 0x83, 0xfe, 0x91, 0x7a, 0x65, 0x98,
	0x16, 0x1e, 0x97, 0x1c, 0x82, 0xbf, 0xa9, 0xfd, 0xb8, 0xe0, 0x66, 0x07, 0x3f, 0xd4, 0x8e, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xae, 0x0f, 0xf5, 0xb8, 0x09, 0x00, 0x00,
}
