// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Config.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	Config.proto

It has these top-level messages:
	Grammar
	ExcelExportTest
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Grammar struct {
	Grammar string `protobuf:"bytes,1,opt,name=grammar" json:"grammar,omitempty"`
}

func (m *Grammar) Reset()                    { *m = Grammar{} }
func (m *Grammar) String() string            { return proto.CompactTextString(m) }
func (*Grammar) ProtoMessage()               {}
func (*Grammar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Grammar) GetGrammar() string {
	if m != nil {
		return m.Grammar
	}
	return ""
}

type ExcelExportTest struct {
	VIPmap    map[int32]*ExcelExportTest_StVIPmap `protobuf:"bytes,1,rep,name=VIPmap" json:"VIPmap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	VIPstruct *ExcelExportTest_StVIPstruct        `protobuf:"bytes,2,opt,name=VIPstruct" json:"VIPstruct,omitempty"`
	VIPlist   []*ExcelExportTest_StVIPlist        `protobuf:"bytes,3,rep,name=VIPlist" json:"VIPlist,omitempty"`
}

func (m *ExcelExportTest) Reset()                    { *m = ExcelExportTest{} }
func (m *ExcelExportTest) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest) ProtoMessage()               {}
func (*ExcelExportTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExcelExportTest) GetVIPmap() map[int32]*ExcelExportTest_StVIPmap {
	if m != nil {
		return m.VIPmap
	}
	return nil
}

func (m *ExcelExportTest) GetVIPstruct() *ExcelExportTest_StVIPstruct {
	if m != nil {
		return m.VIPstruct
	}
	return nil
}

func (m *ExcelExportTest) GetVIPlist() []*ExcelExportTest_StVIPlist {
	if m != nil {
		return m.VIPlist
	}
	return nil
}

type ExcelExportTest_StVIPmap struct {
	InfoInt int32    `protobuf:"varint,1,opt,name=InfoInt" json:"InfoInt,omitempty"`
	InfoStr string   `protobuf:"bytes,2,opt,name=InfoStr" json:"InfoStr,omitempty"`
	ItemID  int32    `protobuf:"varint,3,opt,name=ItemID" json:"ItemID,omitempty"`
	Award   *Grammar `protobuf:"bytes,4,opt,name=Award" json:"Award,omitempty"`
}

func (m *ExcelExportTest_StVIPmap) Reset()                    { *m = ExcelExportTest_StVIPmap{} }
func (m *ExcelExportTest_StVIPmap) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPmap) ProtoMessage()               {}
func (*ExcelExportTest_StVIPmap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *ExcelExportTest_StVIPmap) GetInfoInt() int32 {
	if m != nil {
		return m.InfoInt
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPmap) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *ExcelExportTest_StVIPmap) GetAward() *Grammar {
	if m != nil {
		return m.Award
	}
	return nil
}

type ExcelExportTest_StVIPstruct struct {
	InfoInt int32  `protobuf:"varint,1,opt,name=InfoInt" json:"InfoInt,omitempty"`
	InfoStr string `protobuf:"bytes,2,opt,name=InfoStr" json:"InfoStr,omitempty"`
	ItemID  int32  `protobuf:"varint,3,opt,name=ItemID" json:"ItemID,omitempty"`
}

func (m *ExcelExportTest_StVIPstruct) Reset()                    { *m = ExcelExportTest_StVIPstruct{} }
func (m *ExcelExportTest_StVIPstruct) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPstruct) ProtoMessage()               {}
func (*ExcelExportTest_StVIPstruct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *ExcelExportTest_StVIPstruct) GetInfoInt() int32 {
	if m != nil {
		return m.InfoInt
	}
	return 0
}

func (m *ExcelExportTest_StVIPstruct) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPstruct) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

type ExcelExportTest_StVIPlist struct {
	InfoInt int32  `protobuf:"varint,1,opt,name=InfoInt" json:"InfoInt,omitempty"`
	InfoStr string `protobuf:"bytes,2,opt,name=InfoStr" json:"InfoStr,omitempty"`
	ItemID  int32  `protobuf:"varint,3,opt,name=ItemID" json:"ItemID,omitempty"`
}

func (m *ExcelExportTest_StVIPlist) Reset()                    { *m = ExcelExportTest_StVIPlist{} }
func (m *ExcelExportTest_StVIPlist) String() string            { return proto.CompactTextString(m) }
func (*ExcelExportTest_StVIPlist) ProtoMessage()               {}
func (*ExcelExportTest_StVIPlist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *ExcelExportTest_StVIPlist) GetInfoInt() int32 {
	if m != nil {
		return m.InfoInt
	}
	return 0
}

func (m *ExcelExportTest_StVIPlist) GetInfoStr() string {
	if m != nil {
		return m.InfoStr
	}
	return ""
}

func (m *ExcelExportTest_StVIPlist) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func init() {
	proto.RegisterType((*Grammar)(nil), "main.Grammar")
	proto.RegisterType((*ExcelExportTest)(nil), "main.ExcelExportTest")
	proto.RegisterType((*ExcelExportTest_StVIPmap)(nil), "main.ExcelExportTest.StVIPmap")
	proto.RegisterType((*ExcelExportTest_StVIPstruct)(nil), "main.ExcelExportTest.StVIPstruct")
	proto.RegisterType((*ExcelExportTest_StVIPlist)(nil), "main.ExcelExportTest.StVIPlist")
}

func init() { proto.RegisterFile("Config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x0d, 0xa5, 0x2d, 0x32, 0x68, 0x34, 0x7b, 0x30, 0x1b, 0x0e, 0x8a, 0xed, 0xa5, 0x27, 0x0e,
	0xea, 0xc1, 0x7a, 0x31, 0x46, 0x89, 0xd9, 0x1b, 0xd9, 0x1a, 0x4c, 0x8f, 0x6b, 0xa5, 0x0d, 0x91,
	0x05, 0xb2, 0x4c, 0xb5, 0x8d, 0xbf, 0xe9, 0x07, 0x19, 0x16, 0xa8, 0x8d, 0x89, 0x3d, 0xf5, 0x36,
	0x8f, 0x79, 0x6f, 0x66, 0x1e, 0x6f, 0xe1, 0xf0, 0x21, 0xcf, 0xe6, 0xc9, 0xc2, 0x2f, 0x54, 0x8e,
	0x39, 0xe9, 0x4a, 0x91, 0x64, 0x83, 0x21, 0x58, 0x4f, 0x4a, 0x48, 0x29, 0x14, 0xa1, 0x60, 0x2d,
	0xea, 0x92, 0x1a, 0x9e, 0x31, 0xb2, 0x79, 0x0b, 0x07, 0xdf, 0x5d, 0x38, 0x0e, 0x56, 0xb3, 0x38,
	0x0d, 0x56, 0x45, 0xae, 0xf0, 0x39, 0x2e, 0x91, 0x8c, 0xa1, 0x1f, 0xb1, 0x50, 0x8a, 0x82, 0x1a,
	0x9e, 0x39, 0x72, 0x2e, 0x2f, 0xfc, 0x6a, 0x9e, 0xff, 0x87, 0xe6, 0xd7, 0x9c, 0x20, 0x43, 0xb5,
	0xe6, 0x8d, 0x80, 0xdc, 0x81, 0x1d, 0xb1, 0xb0, 0x44, 0xb5, 0x9c, 0x21, 0xed, 0x78, 0xc6, 0xff,
	0xea, 0x09, 0x6e, 0x88, 0xfc, 0x57, 0x43, 0xc6, 0x60, 0x45, 0x2c, 0x4c, 0x93, 0x12, 0xa9, 0xa9,
	0x97, 0x9f, 0xef, 0x90, 0x57, 0x34, 0xde, 0xf2, 0xdd, 0x2f, 0x38, 0xd0, 0x5f, 0xab, 0x3b, 0x28,
	0x58, 0x2c, 0x9b, 0xe7, 0x2c, 0x43, 0x6d, 0xb8, 0xc7, 0x5b, 0xd8, 0x76, 0x26, 0xa8, 0xf4, 0x7d,
	0x36, 0x6f, 0x21, 0x39, 0x85, 0x3e, 0xc3, 0x58, 0xb2, 0x47, 0x6a, 0x6a, 0x49, 0x83, 0xc8, 0x10,
	0x7a, 0xf7, 0x9f, 0x42, 0xbd, 0xd1, 0xae, 0xf6, 0x73, 0x54, 0x1f, 0xd4, 0xfc, 0x5a, 0x5e, 0xf7,
	0xdc, 0x29, 0x38, 0x5b, 0x8e, 0xf6, 0xb9, 0xdf, 0x7d, 0x01, 0x7b, 0xe3, 0x76, 0xaf, 0x83, 0xa7,
	0xe0, 0x6c, 0x65, 0x48, 0x4e, 0xc0, 0x7c, 0x8f, 0xd7, 0xcd, 0xd8, 0xaa, 0x24, 0xd7, 0xd0, 0xfb,
	0x10, 0xe9, 0x32, 0x6e, 0x92, 0x3c, 0xdb, 0x11, 0x85, 0x14, 0x05, 0xaf, 0xc9, 0xb7, 0x9d, 0x1b,
	0xe3, 0xb5, 0xaf, 0x1f, 0xe2, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x9b, 0x2c, 0x99,
	0x98, 0x02, 0x00, 0x00,
}
